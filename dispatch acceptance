/**
 * üéØ –°–∏—Å—Ç–µ–º–∞ —É—á—ë—Ç–∞ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
 * –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Å—è—á–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤ —Å –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å—é
 */

// üìã –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ (–º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ –º–µ–Ω—é)
// –§–æ—Ä–º–∞—Ç: [Team, –ò–º—è]
// –í—Å—Ç–∞–≤—å—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –≤–º–µ—Å—Ç–æ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫
const EMPLOYEES = [
  // –ö–æ–º–∞–Ω–¥–∞ 1
  ["Team 1", ""],
  ["Team 1", ""],
  ["Team 1", ""],
  ["Team 1", ""],
  ["Team 1", ""],
  ["Team 1", ""],
  ["Team 1", ""],
  ["Team 1", ""],
  ["Team 1", ""],
  ["Team 1", ""],
  ["Team 1", ""],
  ["Team 1", ""],
  ["Team 1", ""],
  ["Team 1", ""],
  ["Team 1", ""],
  ["Team 1", ""],
  ["Team 1", ""],
  ["Team 1", ""],
  ["Team 1", ""],
  ["Team 1", ""],

  // –ö–æ–º–∞–Ω–¥–∞ 2
  ["Team 2", ""],
  ["Team 2", ""],
  ["Team 2", ""],
  ["Team 2", ""],
  ["Team 2", ""],
  ["Team 2", ""],
  ["Team 2", ""],
  ["Team 2", ""],
  ["Team 2", ""],
  ["Team 2", ""],
  ["Team 2", ""],
  ["Team 2", ""],
  ["Team 2", ""],
  ["Team 2", ""],
  ["Team 2", ""],
  ["Team 2", ""],
  ["Team 2", ""],
  ["Team 2", ""],
  ["Team 2", ""],
  ["Team 2", ""],

  // –ö–æ–º–∞–Ω–¥–∞ 3
  ["Team 3", ""],
  ["Team 3", ""],
  ["Team 3", ""],
  ["Team 3", ""],
  ["Team 3", ""],
  ["Team 3", ""],
  ["Team 3", ""],
  ["Team 3", ""],
  ["Team 3", ""],
  ["Team 3", ""],
  ["Team 3", ""],
  ["Team 3", ""],
  ["Team 3", ""],
  ["Team 3", ""],
  ["Team 3", ""],
  ["Team 3", ""],
  ["Team 3", ""],
  ["Team 3", ""],
  ["Team 3", ""],
  ["Team 3", ""],

  // –ö–æ–º–∞–Ω–¥–∞ 4
  ["Team 4", ""],
  ["Team 4", ""],
  ["Team 4", ""],
  ["Team 4", ""],
  ["Team 4", ""],
  ["Team 4", ""],
  ["Team 4", ""],
  ["Team 4", ""],
  ["Team 4", ""],
  ["Team 4", ""],
  ["Team 4", ""],
  ["Team 4", ""],
  ["Team 4", ""],
  ["Team 4", ""],
  ["Team 4", ""],
  ["Team 4", ""],
  ["Team 4", ""],
  ["Team 4", ""],
  ["Team 4", ""],
  ["Team 4", ""],

  // –ö–æ–º–∞–Ω–¥–∞ 5
  ["Team 5", ""],
  ["Team 5", ""],
  ["Team 5", ""],
  ["Team 5", ""],
  ["Team 5", ""],
  ["Team 5", ""],
  ["Team 5", ""],
  ["Team 5", ""],
  ["Team 5", ""],
  ["Team 5", ""],
  ["Team 5", ""],
  ["Team 5", ""],
  ["Team 5", ""],
  ["Team 5", ""],
  ["Team 5", ""],
  ["Team 5", ""],
  ["Team 5", ""],
  ["Team 5", ""],
  ["Team 5", ""],
  ["Team 5", ""]
];

// üé® –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
const COLORS = {
  "‚úÖ": "#b7e1cd",        // Present - –∑–µ–ª—ë–Ω—ã–π
  "‚è∞": "#fff2cc",        // Late - —Å–≤–µ—Ç–ª–æ-–∂—ë–ª—Ç—ã–π
  "‚ùå": "#f4cccc",        // Absent - –∫—Ä–∞—Å–Ω—ã–π
  "üå¥": "#cfe2f3",        // Vacation - –≥–æ–ª—É–±–æ–π
  "üôÜ": "#e0e0e0",        // Day Off - —Å–µ—Ä—ã–π
  "header": "#d9d9d9"    // –ó–∞–≥–æ–ª–æ–≤–∫–∏
};

// üìù –°—Ç–∞—Ç—É—Å—ã –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
const STATUS_OPTIONS = [
  "‚úÖ",
  "‚è∞",
  "‚ùå",
  "üôÜ",
  "üå¥"
];

/**
 * üéõÔ∏è –°–æ–∑–¥–∞—ë—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ç–∞–±–ª–∏—Ü—ã
 */
function onOpen() {
  setupMenu();
}

/**
 * ‚ö° –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Ü–≤–µ—Ç –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —è—á–µ–π–∫–∏
 */
function onEdit(e) {
  const sheet = e.source.getActiveSheet();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—Å—Ç –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ (—Å–æ–¥–µ—Ä–∂–∏—Ç –≥–æ–¥ 2025 –∏–ª–∏ 2026)
  const sheetName = sheet.getName();
  if (!sheetName.includes('2025') && !sheetName.includes('2026') && !sheetName.startsWith("Attendance_")) {
    return;
  }

  const range = e.range;
  const row = range.getRow();
  const col = range.getColumn();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —è—á–µ–π–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ (–Ω–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫, –Ω–µ Team, –Ω–µ –∏–º–µ–Ω–∞, –Ω–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É)
  if (row < 2) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
  if (col < 3) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã Team –∏ –ò–º—è

  const lastCol = sheet.getLastColumn();
  const daysInMonth = lastCol - 7; // 7 = 5 —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫ + 2 (Team + Name)

  if (col > daysInMonth + 2) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

  const value = e.value ? e.value.toString().trim() : "";

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é
  let color = "#ffffff"; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–µ–ª—ã–π

  if (value === "‚úÖ") {
    color = COLORS["‚úÖ"];
  } else if (value === "‚è∞") {
    color = COLORS["‚è∞"];
  } else if (value === "‚ùå") {
    color = COLORS["‚ùå"];
  } else if (value === "üå¥") {
    color = COLORS["üå¥"];
  } else if (value === "üôÜ") {
    color = COLORS["üôÜ"];
  } else {
    // –ï—Å–ª–∏ —è—á–µ–π–∫–∞ –ø—É—Å—Ç–∞—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —á–µ—Ä–µ–¥—É—é—â–∏–π—Å—è —Ü–≤–µ—Ç
    color = ((row - 2) % 2 === 0) ? "#ffffff" : "#f9f9f9";
  }

  // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –∫ —è—á–µ–π–∫–µ
  range.setBackground(color);

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è –≤—Å–µ—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–ª–æ–Ω–æ–∫ —ç—Ç–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
  updateStatisticsCellColors(sheet, row, daysInMonth);
}

/**
 * üé® Updates all statistics cell colors for a specific employee row
 */
function updateStatisticsCellColors(sheet, row, daysInMonth) {
  try {
    const absentCol = daysInMonth + 3;
    const lateCol = daysInMonth + 4;
    const presentCol = daysInMonth + 5;
    const dayOffCol = daysInMonth + 6;
    const vacationCol = daysInMonth + 7;

    // –î–∞–µ–º –≤—Ä–µ–º—è —Ñ–æ—Ä–º—É–ª–∞–º –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å—Å—è
    SpreadsheetApp.flush();

    // Absent
    const absentCell = sheet.getRange(row, absentCol);
    const absentValue = absentCell.getValue();
    let absentColor = "#548235";
    if (typeof absentValue === 'number' && absentValue > 0) {
      if (absentValue > 0.15) absentColor = "#8B0000"; // Dark Red - >15%
      else if (absentValue > 0.10) absentColor = "#ff0000"; // Red - >10%
      else if (absentValue > 0.05) absentColor = "#ff9900"; // Orange - >5%
      else absentColor = "#fff2cc"; // Light Yellow - 0-5%
    }
    absentCell.setBackground(absentColor).setFontColor("#000000");

    // Late (same thresholds as Absent)
    const lateCell = sheet.getRange(row, lateCol);
    const lateValue = lateCell.getValue();
    let lateColor = "#548235";
    if (typeof lateValue === 'number' && lateValue > 0) {
      if (lateValue > 0.15) lateColor = "#8B0000"; // Dark Red - >15%
      else if (lateValue > 0.10) lateColor = "#ff0000"; // Red - >10%
      else if (lateValue > 0.05) lateColor = "#ff9900"; // Orange - >5%
      else lateColor = "#fff2cc"; // Light Yellow - 0-5%
    }
    lateCell.setBackground(lateColor).setFontColor("#000000");

    // Present
    const presentCell = sheet.getRange(row, presentCol);
    const presentValue = presentCell.getValue();
    let presentColor = "#fffef7";
    if (typeof presentValue === 'number') {
      if (presentValue >= 1.0) presentColor = "#548235";
      else if (presentValue >= 0.8) presentColor = "#ffc000";
      else if (presentValue >= 0.6) presentColor = "#ff9900";
      else if (presentValue >= 0.5) presentColor = "#ff6600";
      else presentColor = "#ff0000";
    }
    presentCell.setBackground(presentColor).setFontColor("#000000");

    // Day Off
    const dayOffCell = sheet.getRange(row, dayOffCol);
    const dayOffValue = dayOffCell.getValue();
    let dayOffColor = "#e0e0e0";
    if (typeof dayOffValue === 'number' && dayOffValue > 0) {
      if (dayOffValue > 10) dayOffColor = "#ffc000";
      else dayOffColor = "#f0f0f0";
    }
    dayOffCell.setBackground(dayOffColor).setFontColor("#000000");

    // Vacation
    const vacationCell = sheet.getRange(row, vacationCol);
    const vacationValue = vacationCell.getValue();
    let vacationColor = "#e0e0e0";
    if (typeof vacationValue === 'number' && vacationValue > 0) {
      vacationColor = "#cfe2f3";
    }
    vacationCell.setBackground(vacationColor).setFontColor("#000000");
  } catch (e) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
  }
}

/**
 * üìÖ Creates menu in Google Sheets
 */
function setupMenu() {
  const ui = SpreadsheetApp.getUi();
  ui.createMenu('üìÖ Attendance Tools')
    .addItem('‚ûï Create New Month', 'showMonthDialog')
    .addItem('üîÑ Recalculate Stats', 'calculateAttendance')
    .addItem('üé® Apply Formatting', 'applyColorFormatting')
    .addSeparator()
    .addItem('üë• Manage Employees', 'showEmployeeManager')
    .addItem('‚úèÔ∏è Rename Employee', 'showRenameEmployeeDialog')
    .addSeparator()
    .addItem('üìä Create Dashboard', 'createDashboard')
    .addItem('üìà Employee Report', 'showEmployeeReportDialog')
    .addToUi();
}

/**
 * üí¨ Shows month selection dialog
 */
function showMonthDialog() {
  const html = HtmlService.createHtmlOutput(getMonthPickerHTML())
    .setWidth(450)
    .setHeight(550);

  SpreadsheetApp.getUi().showModalDialog(html, 'üìÖ Create New Attendance Sheet');
}

/**
 * üé® –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML –∫–æ–¥ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞
 */
function getMonthPickerHTML() {
  return `
<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
      padding: 24px;
      background: #f8f9fa;
    }

    .container {
      max-width: 400px;
      margin: 0 auto;
    }

    .title {
      font-size: 18px;
      font-weight: 600;
      color: #1f2937;
      margin-bottom: 24px;
      text-align: center;
    }

    .section {
      background: white;
      border-radius: 12px;
      padding: 20px;
      margin-bottom: 16px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }

    .section-title {
      font-size: 14px;
      font-weight: 500;
      color: #6b7280;
      margin-bottom: 12px;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }

    .months-grid {
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      gap: 8px;
    }

    .month-btn {
      padding: 12px 16px;
      border: 2px solid #e5e7eb;
      border-radius: 8px;
      background: white;
      color: #4b5563;
      font-size: 14px;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .month-btn:hover {
      border-color: #3b82f6;
      color: #3b82f6;
      background: #eff6ff;
    }

    .month-btn.active {
      border-color: #3b82f6;
      background: #3b82f6;
      color: white;
    }

    .years-grid {
      display: grid;
      grid-template-columns: repeat(4, 1fr);
      gap: 8px;
    }

    .year-btn {
      padding: 10px;
      border: 2px solid #e5e7eb;
      border-radius: 8px;
      background: white;
      color: #4b5563;
      font-size: 14px;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .year-btn:hover {
      border-color: #3b82f6;
      color: #3b82f6;
      background: #eff6ff;
    }

    .year-btn.active {
      border-color: #3b82f6;
      background: #3b82f6;
      color: white;
    }

    .create-btn {
      width: 100%;
      padding: 14px;
      border: none;
      border-radius: 8px;
      background: #3b82f6;
      color: white;
      font-size: 15px;
      font-weight: 600;
      cursor: pointer;
      transition: background 0.2s ease;
      margin-top: 16px;
    }

    .create-btn:hover {
      background: #2563eb;
    }

    .create-btn:disabled {
      background: #9ca3af;
      cursor: not-allowed;
    }

    .message {
      margin-top: 16px;
      padding: 12px;
      border-radius: 8px;
      font-size: 14px;
      text-align: center;
      display: none;
    }

    .message.success {
      background: #d1fae5;
      color: #065f46;
      display: block;
    }

    .message.error {
      background: #fee2e2;
      color: #991b1b;
      display: block;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="title">Select Month and Year</div>

    <div class="section">
      <div class="section-title">Month</div>
      <div class="months-grid">
        <button class="month-btn" data-month="JAN">JAN</button>
        <button class="month-btn" data-month="FEB">FEB</button>
        <button class="month-btn" data-month="MAR">MAR</button>
        <button class="month-btn" data-month="APR">APR</button>
        <button class="month-btn" data-month="MAY">MAY</button>
        <button class="month-btn" data-month="JUN">JUN</button>
        <button class="month-btn" data-month="JUL">JUL</button>
        <button class="month-btn" data-month="AUG">AUG</button>
        <button class="month-btn" data-month="SEP">SEP</button>
        <button class="month-btn" data-month="OCT">OCT</button>
        <button class="month-btn" data-month="NOV">NOV</button>
        <button class="month-btn" data-month="DEC">DEC</button>
      </div>
    </div>

    <div class="section">
      <div class="section-title">Year</div>
      <div class="years-grid">
        <button class="year-btn" data-year="2025">2025</button>
        <button class="year-btn" data-year="2026">2026</button>
      </div>
    </div>

    <button class="create-btn" id="createBtn" disabled>Create Sheet</button>

    <div class="message" id="message"></div>
  </div>

  <script>
    let selectedMonth = null;
    let selectedYear = null;

    // Handle month selection
    document.querySelectorAll('.month-btn').forEach(btn => {
      btn.addEventListener('click', function() {
        document.querySelectorAll('.month-btn').forEach(b => b.classList.remove('active'));
        this.classList.add('active');
        selectedMonth = this.dataset.month;
        updateCreateButton();
      });
    });

    // Handle year selection
    document.querySelectorAll('.year-btn').forEach(btn => {
      btn.addEventListener('click', function() {
        document.querySelectorAll('.year-btn').forEach(b => b.classList.remove('active'));
        this.classList.add('active');
        selectedYear = this.dataset.year;
        updateCreateButton();
      });
    });

    // Update create button state
    function updateCreateButton() {
      const btn = document.getElementById('createBtn');
      if (selectedMonth && selectedYear) {
        btn.disabled = false;
        btn.textContent = \`Create \${selectedMonth} \${selectedYear}\`;
      } else {
        btn.disabled = true;
        btn.textContent = 'Create Sheet';
      }
    }

    // Create sheet
    document.getElementById('createBtn').addEventListener('click', function() {
      const btn = this;
      const message = document.getElementById('message');

      if (!selectedMonth || !selectedYear) return;

      btn.disabled = true;
      btn.textContent = 'Creating...';
      message.className = 'message';
      message.style.display = 'none';

      google.script.run
        .withSuccessHandler(function(result) {
          message.textContent = '‚úì Sheet created successfully!';
          message.className = 'message success';
          setTimeout(() => {
            google.script.host.close();
          }, 1500);
        })
        .withFailureHandler(function(error) {
          message.textContent = '‚úó Error: ' + error.message;
          message.className = 'message error';
          btn.disabled = false;
          updateCreateButton();
        })
        .processMonthSelection(selectedMonth, selectedYear);
    });

    // Auto-select current month and year
    window.onload = function() {
      const now = new Date();
      const currentMonth = now.getMonth();
      const currentYear = now.getFullYear();

      const monthNames = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN',
                         'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC'];

      // Auto-select current month
      document.querySelectorAll('.month-btn').forEach(btn => {
        if (btn.dataset.month === monthNames[currentMonth]) {
          btn.click();
        }
      });

      // Auto-select current year (if available)
      document.querySelectorAll('.year-btn').forEach(btn => {
        if (btn.dataset.year === currentYear.toString()) {
          btn.click();
        }
      });
    };
  </script>
</body>
</html>
  `;
}

/**
 * üé® –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML –∫–æ–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏
 */
function getEmployeeManagerHTML() {
  return `
<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      padding: 20px;
      background: #f8f9fa;
    }

    .container {
      max-width: 100%;
    }

    .section {
      background: white;
      border-radius: 12px;
      padding: 20px;
      margin-bottom: 16px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }

    .section-title {
      font-size: 16px;
      font-weight: 600;
      color: #1f2937;
      margin-bottom: 16px;
    }

    .add-form {
      display: flex;
      flex-direction: column;
      gap: 12px;
    }

    .form-group {
      display: flex;
      flex-direction: column;
      gap: 6px;
    }

    label {
      font-size: 13px;
      font-weight: 500;
      color: #6b7280;
    }

    textarea, select, input {
      padding: 10px 12px;
      border: 2px solid #e5e7eb;
      border-radius: 8px;
      font-size: 14px;
      font-family: inherit;
      transition: border-color 0.2s;
    }

    textarea:focus, select:focus, input:focus {
      outline: none;
      border-color: #3b82f6;
    }

    textarea {
      resize: vertical;
      min-height: 80px;
    }

    .btn {
      padding: 10px 16px;
      border: none;
      border-radius: 8px;
      font-size: 14px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.2s;
    }

    .btn-primary {
      background: #3b82f6;
      color: white;
    }

    .btn-primary:hover {
      background: #2563eb;
    }

    .btn-danger {
      background: #ef4444;
      color: white;
    }

    .btn-danger:hover {
      background: #dc2626;
    }

    .btn-small {
      padding: 6px 12px;
      font-size: 12px;
    }

    .teams-list {
      display: flex;
      flex-direction: column;
      gap: 16px;
    }

    .team-card {
      border: 2px solid #e5e7eb;
      border-radius: 8px;
      padding: 16px;
      background: #f9fafb;
    }

    .team-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 12px;
      padding-bottom: 8px;
      border-bottom: 2px solid #e5e7eb;
    }

    .team-name {
      font-size: 15px;
      font-weight: 600;
      color: #1f2937;
    }

    .team-count {
      font-size: 13px;
      color: #6b7280;
      background: white;
      padding: 4px 10px;
      border-radius: 12px;
    }

    .employees-list {
      display: flex;
      flex-direction: column;
      gap: 6px;
    }

    .employee-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 8px 12px;
      background: white;
      border-radius: 6px;
      border: 1px solid #e5e7eb;
    }

    .employee-name-input {
      font-size: 14px;
      color: #374151;
      border: 2px solid transparent;
      padding: 4px 8px;
      border-radius: 4px;
      background: transparent;
      font-family: inherit;
      flex: 1;
      transition: all 0.2s;
    }

    .employee-name-input:focus {
      outline: none;
      border-color: #3b82f6;
      background: white;
    }

    .employee-name-input:hover:not(:disabled) {
      border-color: #e5e7eb;
      background: white;
    }

    .employee-name-input.empty {
      color: #9ca3af;
      font-style: italic;
    }

    .employee-name-input:disabled {
      cursor: not-allowed;
    }

    .employee-actions {
      display: flex;
      gap: 6px;
    }

    .message {
      padding: 12px;
      border-radius: 8px;
      font-size: 14px;
      margin-bottom: 16px;
      display: none;
    }

    .message.success {
      background: #d1fae5;
      color: #065f46;
      display: block;
    }

    .message.error {
      background: #fee2e2;
      color: #991b1b;
      display: block;
    }

    .loading {
      text-align: center;
      padding: 20px;
      color: #6b7280;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="message" id="message"></div>

    <div class="section">
      <div class="section-title">‚ûï Add Employees</div>
      <div class="add-form">
        <div class="form-group">
          <label>Select Team</label>
          <select id="teamSelect">
            <option value="Team 1">Team 1</option>
            <option value="Team 2">Team 2</option>
            <option value="Team 3">Team 3</option>
            <option value="Team 4">Team 4</option>
            <option value="Team 5">Team 5</option>
          </select>
        </div>
        <div class="form-group">
          <label>Employee Names (one per line or comma separated)</label>
          <textarea id="namesInput" placeholder="John Smith&#10;Maria Garcia&#10;Alex Johnson"></textarea>
        </div>
        <button class="btn btn-primary" onclick="addEmployees()">Add Employees</button>
      </div>
    </div>

    <div class="section">
      <div class="section-title" style="display: flex; justify-content: space-between; align-items: center;">
        <span>üë• Current Employees</span>
        <button class="btn btn-danger btn-small" onclick="deleteAllEmployees()" style="font-size: 13px;">üóëÔ∏è Delete All</button>
      </div>
      <div id="teamsList" class="loading">Loading...</div>
    </div>
  </div>

  <script>
    let teamsData = {};

    function showMessage(text, type) {
      const msg = document.getElementById('message');
      msg.textContent = text;
      msg.className = 'message ' + type;
      setTimeout(() => {
        msg.style.display = 'none';
      }, 5000);
    }

    function loadEmployees() {
      google.script.run
        .withSuccessHandler(function(teams) {
          teamsData = teams;
          renderTeams();
        })
        .withFailureHandler(function(error) {
          document.getElementById('teamsList').innerHTML = 'Loading error: ' + error.message;
        })
        .getEmployeesList();
    }

    function renderTeams() {
      const container = document.getElementById('teamsList');
      if (Object.keys(teamsData).length === 0) {
        container.innerHTML = '<p style="color: #6b7280; text-align: center;">No employees</p>';
        return;
      }

      let html = '<div class="teams-list">';

      Object.keys(teamsData).sort().forEach(team => {
        const employees = teamsData[team];
        html += \`
          <div class="team-card">
            <div class="team-header">
              <span class="team-name">\${team}</span>
              <span class="team-count">\${employees.length} —á–µ–ª.</span>
            </div>
            <div class="employees-list">
        \`;

        employees.forEach(name => {
          const displayName = name || '(empty)';
          const isEmpty = !name;
          const escapedName = name.replace(/'/g, "\\\\'");
          const itemId = 'emp_' + team.replace(/\s/g, '_') + '_' + Math.random().toString(36).substr(2, 9);
          html += \`
            <div class="employee-item" id="\${itemId}">
              <input type="text" class="employee-name-input \${isEmpty ? 'empty' : ''}"
                     value="\${displayName}"
                     data-original="\${escapedName}"
                     data-team="\${team}"
                     \${isEmpty ? 'disabled' : ''}
                     onblur="saveEmployeeName(this)"
                     onkeypress="if(event.key==='Enter') this.blur()">
              <div class="employee-actions">
                \${!isEmpty ? \`
                  <select onchange="moveEmployee('\${escapedName}', '\${team}', this.value)" style="font-size: 12px; padding: 4px 8px;">
                    <option value="">Move to...</option>
                    <option value="Team 1">Team 1</option>
                    <option value="Team 2">Team 2</option>
                    <option value="Team 3">Team 3</option>
                    <option value="Team 4">Team 4</option>
                    <option value="Team 5">Team 5</option>
                  </select>
                  <button class="btn btn-danger btn-small" onclick="deleteEmployee('\${escapedName}', '\${team}')">Delete</button>
                \` : ''}
              </div>
            </div>
          \`;
        });

        html += \`
            </div>
          </div>
        \`;
      });

      html += '</div>';
      container.innerHTML = html;
    }

    function addEmployees() {
      const team = document.getElementById('teamSelect').value;
      const names = document.getElementById('namesInput').value;

      if (!names.trim()) {
        showMessage('Please enter employee names', 'error');
        return;
      }

      google.script.run
        .withSuccessHandler(function(result) {
          showMessage(result.message, 'success');
          document.getElementById('namesInput').value = '';
          loadEmployees();
        })
        .withFailureHandler(function(error) {
          showMessage('–û—à–∏–±–∫–∞: ' + error.message, 'error');
        })
        .addEmployeesToTeam(team, names);
    }

    function moveEmployee(name, fromTeam, toTeam) {
      if (!toTeam) return;

      google.script.run
        .withSuccessHandler(function(result) {
          showMessage(result.message, 'success');
          loadEmployees();
        })
        .withFailureHandler(function(error) {
          showMessage('–û—à–∏–±–∫–∞: ' + error.message, 'error');
        })
        .moveEmployeeToTeam(name, fromTeam, toTeam);
    }

    function saveEmployeeName(input) {
      const oldName = input.dataset.original;
      const newName = input.value.trim();
      const team = input.dataset.team;

      // No change
      if (newName === oldName || newName === '') {
        input.value = oldName; // Restore original
        return;
      }

      // Disable input while saving
      input.disabled = true;
      const originalBg = input.style.background;
      input.style.background = '#fffbeb'; // Light yellow during save

      google.script.run
        .withSuccessHandler(function(result) {
          showMessage(result.message, 'success');
          input.disabled = false;
          input.style.background = '#d1fae5'; // Light green on success
          // Update the data-original to new name
          input.dataset.original = newName;

          // Restore background after animation
          setTimeout(() => {
            input.style.background = originalBg;
          }, 1000);
        })
        .withFailureHandler(function(error) {
          showMessage('Error: ' + error.message, 'error');
          input.value = oldName; // Restore original on error
          input.disabled = false;
          input.style.background = originalBg;
        })
        .renameEmployeeAcrossAllSheets(oldName, newName, team);
    }

    function deleteEmployee(name, team) {
      google.script.run
        .withSuccessHandler(function(result) {
          showMessage(result.message, 'success');
          loadEmployees();
        })
        .withFailureHandler(function(error) {
          showMessage('Error: ' + error.message, 'error');
        })
        .deleteEmployee(name, team);
    }

    function deleteAllEmployees() {
      google.script.run
        .withSuccessHandler(function(result) {
          showMessage(result.message, 'success');
          loadEmployees();
        })
        .withFailureHandler(function(error) {
          showMessage('Error: ' + error.message, 'error');
        })
        .deleteAllEmployees();
    }

    window.onload = loadEmployees;
  </script>
</body>
</html>
  `;
}

/**
 * üìÖ Processes month selection from dialog
 */
function processMonthSelection(month, year) {
  createAttendanceSheet(month, year);
  return `Sheet "${month} ${year}" created successfully!`;
}

/**
 * üìä Creates new attendance sheet
 * @param {string} month - Month (e.g., "OCT", "NOV")
 * @param {string} year - Year (e.g., "2025", "2026")
 */
function createAttendanceSheet(month, year) {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const ui = SpreadsheetApp.getUi();

  // Form sheet name: just "OCT 2025" (no "Attendance_" prefix)
  const sheetName = `${month} ${year}`;

  // Map short month to full name for header
  const monthFullNames = {
    "JAN": "JANUARY", "FEB": "FEBRUARY", "MAR": "MARCH", "APR": "APRIL",
    "MAY": "MAY", "JUN": "JUNE", "JUL": "JULY", "AUG": "AUGUST",
    "SEP": "SEPTEMBER", "OCT": "OCTOBER", "NOV": "NOVEMBER", "DEC": "DECEMBER"
  };
  const fullMonthName = monthFullNames[month] || month;

  // Check if sheet already exists
  if (ss.getSheetByName(sheetName)) {
    const response = ui.alert(
      '‚ö†Ô∏è Sheet already exists',
      `Sheet "${sheetName}" already exists. Overwrite?`,
      ui.ButtonSet.YES_NO
    );

    if (response === ui.Button.NO) {
      return;
    } else {
      ss.deleteSheet(ss.getSheetByName(sheetName));
    }
  }

  // Create new sheet
  const sheet = ss.insertSheet(sheetName);

  // Determine number of days in month
  const daysInMonth = getDaysInMonth(month, year);

  // üèóÔ∏è Build structure (use full month name in header)
  buildSheetStructure(sheet, daysInMonth, fullMonthName);

  // üé® Apply formatting
  applyInitialFormatting(sheet, daysInMonth);

  // ‚úÖ Add data validation
  addDataValidation(sheet, daysInMonth);

  // üìê Adjust column widths
  adjustColumnWidths(sheet, daysInMonth);

  // Activate new sheet
  ss.setActiveSheet(sheet);

  ui.alert('‚úÖ Done!', `Sheet "${sheetName}" created successfully!`, ui.ButtonSet.OK);
}

/**
 * üèóÔ∏è Builds sheet structure
 */
function buildSheetStructure(sheet, daysInMonth, month) {
  // Headers - use month name instead of "Name"
  const headers = ["Team", month];

  // Add dates (1-31)
  for (let day = 1; day <= daysInMonth; day++) {
    headers.push(day);
  }

  // Add statistics columns
  headers.push("Absent", "Late", "Present", "Day Off", "Vacation");

  // Write headers
  sheet.getRange(1, 1, 1, headers.length).setValues([headers]);

  // Get saved employees list
  const employees = getSavedEmployees();

  // Add teams and employee names
  const employeeData = employees.map(emp => [emp[0], emp[1]]); // [Team, Name]

  if (employeeData.length > 0) {
    sheet.getRange(2, 1, employeeData.length, 2).setValues(employeeData);
  }

  // Add statistics formulas
  addFormulas(sheet, daysInMonth, employees.length);
}

/**
 * üìê –î–æ–±–∞–≤–ª—è–µ—Ç —Ñ–æ—Ä–º—É–ª—ã –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
function addFormulas(sheet, daysInMonth, employeeCount) {
  const lastDayColumn = daysInMonth + 2; // +2 –ø–æ—Ç–æ–º—É —á—Ç–æ –ø–µ—Ä–≤—ã–µ –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞ - Team –∏ –ò–º—è
  const absentCol = lastDayColumn + 1;
  const lateCol = lastDayColumn + 2;
  const presentCol = lastDayColumn + 3;
  const dayOffCol = lastDayColumn + 4;
  const vacationCol = lastDayColumn + 5;

  const lastDayLetter = columnToLetter(lastDayColumn);
  const absentColLetter = columnToLetter(absentCol);
  const lateColLetter = columnToLetter(lateCol);
  const dayOffColLetter = columnToLetter(dayOffCol);
  const vacationColLetter = columnToLetter(vacationCol);

  // –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
  for (let row = 2; row <= employeeCount + 1; row++) {
    // % –ü—Ä–æ–ø—É—Å–∫–æ–≤
    const absentFormula = `=COUNTIF(C${row}:${lastDayLetter}${row},"‚ùå")/COUNTA(C$1:${lastDayLetter}$1)`;
    sheet.getRange(row, absentCol).setFormula(absentFormula).setNumberFormat("0.0%");

    // % –û–ø–æ–∑–¥–∞–Ω–∏–π
    const lateFormula = `=COUNTIF(C${row}:${lastDayLetter}${row},"‚è∞")/COUNTA(C$1:${lastDayLetter}$1)`;
    sheet.getRange(row, lateCol).setFormula(lateFormula).setNumberFormat("0.0%");

    // % –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è (–≤—ã—á–∏—Ç–∞–µ–º Absent + 25% –æ—Ç Late)
    // 4 –æ–ø–æ–∑–¥–∞–Ω–∏—è = 1 –ø—Ä–æ–≥—É–ª
    const presentFormula = `=1-(${absentColLetter}${row}+(${lateColLetter}${row}*0.25))`;
    sheet.getRange(row, presentCol).setFormula(presentFormula).setNumberFormat("0.0%");

    // Day Off Count
    const dayOffFormula = `=COUNTIF(C${row}:${lastDayLetter}${row},"üôÜ")`;
    sheet.getRange(row, dayOffCol).setFormula(dayOffFormula);

    // Vacation Count (–ø–æ—Å–ª–µ–¥–Ω—è—è –∫–æ–ª–æ–Ω–∫–∞)
    const vacationFormula = `=COUNTIF(C${row}:${lastDayLetter}${row},"üå¥")`;
    sheet.getRange(row, vacationCol).setFormula(vacationFormula);
  }
}

/**
 * üé® –ü—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
 */
function applyInitialFormatting(sheet, daysInMonth) {
  const employees = getSavedEmployees();
  const employeeCount = employees.length;

  if (employeeCount === 0) return;

  const maxCol = daysInMonth + 7; // –î–Ω–∏ + 5 —Å—Ç–æ–ª–±—Ü–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ + 2 —Å—Ç–æ–ª–±—Ü–∞ (Team + –ò–º—è)

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
  const headerRange = sheet.getRange(1, 1, 1, maxCol);
  headerRange
    .setBackground(COLORS.header)
    .setFontWeight("bold")
    .setFontSize(11)
    .setHorizontalAlignment("center")
    .setVerticalAlignment("middle")
    .setBorder(true, true, true, true, true, true, "#000000", SpreadsheetApp.BorderStyle.SOLID_MEDIUM);

  // –§–∏–∫—Å–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –∏ –ø–µ—Ä–≤—ã–µ –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞
  sheet.setFrozenRows(1);
  sheet.setFrozenColumns(2);

  // –û–±—ä–µ–¥–∏–Ω—è–µ–º —è—á–µ–π–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
  mergeTeamCells(sheet, employees);

  // Color employee names by team
  colorEmployeeNames(sheet, employees);

  // –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ç–æ–ª–±—Ü–æ–≤ —Å –¥–Ω—è–º–∏
  sheet.getRange(2, 3, employeeCount, daysInMonth)
    .setHorizontalAlignment("center")
    .setVerticalAlignment("middle")
    .setFontSize(11);

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  sheet.getRange(2, daysInMonth + 3, employeeCount, 5)
    .setHorizontalAlignment("center")
    .setVerticalAlignment("middle")
    .setFontSize(10)
    .setFontWeight("bold");

  // –¶–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–ª–æ–Ω–æ–∫ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ)
  colorStatisticsColumns(sheet, daysInMonth, employeeCount);

  // –î–æ–±–∞–≤–ª—è–µ–º —á–µ—Ä–Ω—ã–µ –∂–∏—Ä–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã
  sheet.getRange(1, 1, employeeCount + 1, maxCol)
    .setBorder(true, true, true, true, true, true, "#000000", SpreadsheetApp.BorderStyle.SOLID_MEDIUM);

  // –ß–µ—Ä–µ–¥—É—é—â–∏–µ—Å—è —Ü–≤–µ—Ç–∞ —Å—Ç—Ä–æ–∫ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
  for (let row = 2; row <= employeeCount + 1; row++) {
    if (row % 2 === 0) {
      sheet.getRange(row, 3, 1, daysInMonth).setBackground("#ffffff");
    } else {
      sheet.getRange(row, 3, 1, daysInMonth).setBackground("#f9f9f9");
    }
  }
}

/**
 * üîó Merges cells for each team in Team column
 */
function mergeTeamCells(sheet, employees) {
  if (!employees || employees.length === 0) return;

  // Team colors
  const teamColors = {
    "Team 1": "#548235",
    "Team 2": "#ffc000",
    "Team 3": "#4472c4",
    "Team 4": "#ffff00",
    "Team 5": "#674ea7"
  };

  let currentTeam = null;
  let startRow = 2;
  let teamCount = 0;

  // Loop through all employees
  for (let i = 0; i < employees.length; i++) {
    const team = employees[i][0];
    const row = i + 2;

    if (currentTeam === null) {
      currentTeam = team;
      startRow = row;
      teamCount = 1;
    } else if (currentTeam === team) {
      teamCount++;
    } else {
      // Merge cells for previous team
      if (teamCount > 1) {
        const range = sheet.getRange(startRow, 1, teamCount, 1);
        range.mergeVertically();
        range.setVerticalAlignment("middle");
      }

      // Format merged cell with team color background and black text
      const teamColor = teamColors[currentTeam] || "#e8f0fe";
      sheet.getRange(startRow, 1, teamCount, 1)
        .setFontWeight("bold")
        .setFontSize(12)
        .setHorizontalAlignment("center")
        .setVerticalAlignment("middle")
        .setBackground(teamColor)
        .setFontColor("#000000");

      // Start new team
      currentTeam = team;
      startRow = row;
      teamCount = 1;
    }
  }

  // Merge last team
  if (teamCount > 1) {
    const range = sheet.getRange(startRow, 1, teamCount, 1);
    range.mergeVertically();
    range.setVerticalAlignment("middle");
  }

  // Format last merged cell with team color background and black text
  const teamColor = teamColors[currentTeam] || "#e8f0fe";
  sheet.getRange(startRow, 1, teamCount, 1)
    .setFontWeight("bold")
    .setFontSize(12)
    .setHorizontalAlignment("center")
    .setVerticalAlignment("middle")
    .setBackground(teamColor)
    .setFontColor("#000000");
}

/**
 * üé® Format employee names - match team background color with black text
 */
function colorEmployeeNames(sheet, employees) {
  if (!employees || employees.length === 0) return;

  // Team colors
  const teamColors = {
    "Team 1": "#548235",
    "Team 2": "#ffc000",
    "Team 3": "#4472c4",
    "Team 4": "#ffff00",
    "Team 5": "#674ea7"
  };

  // Loop through each employee and format their name cell
  for (let i = 0; i < employees.length; i++) {
    const team = employees[i][0];
    const row = i + 2; // +2 because row 1 is header
    const teamColor = teamColors[team] || "#ffffff";

    sheet.getRange(row, 2, 1, 1)
      .setFontWeight("bold")
      .setFontSize(10)
      .setVerticalAlignment("middle")
      .setHorizontalAlignment("left")
      .setBackground(teamColor)
      .setFontColor("#000000");
  }
}

/**
 * üé® Color codes all statistics columns (OPTIMIZED - batch operations)
 */
function colorStatisticsColumns(sheet, daysInMonth, employeeCount) {
  if (employeeCount === 0) return;

  const absentCol = daysInMonth + 3;
  const lateCol = daysInMonth + 4;
  const presentCol = daysInMonth + 5;
  const dayOffCol = daysInMonth + 6;
  const vacationCol = daysInMonth + 7;

  // Read all statistics values at once (batch read)
  const statsRange = sheet.getRange(2, absentCol, employeeCount, 5);
  const statsValues = statsRange.getValues();

  // Prepare background and font color arrays
  const backgrounds = [];
  const fontColors = [];

  for (let i = 0; i < employeeCount; i++) {
    const rowColors = [];
    const rowFontColors = [];

    const absentValue = statsValues[i][0];
    const lateValue = statsValues[i][1];
    const presentValue = statsValues[i][2];
    const dayOffValue = statsValues[i][3];
    const vacationValue = statsValues[i][4];

    // Absent color
    let absentColor = "#548235";
    if (typeof absentValue === 'number' && absentValue > 0) {
      if (absentValue > 0.15) absentColor = "#8B0000";
      else if (absentValue > 0.10) absentColor = "#ff0000";
      else if (absentValue > 0.05) absentColor = "#ff9900";
      else absentColor = "#fff2cc";
    }
    rowColors.push(absentColor);
    rowFontColors.push("#000000");

    // Late color (same as Absent)
    let lateColor = "#548235";
    if (typeof lateValue === 'number' && lateValue > 0) {
      if (lateValue > 0.15) lateColor = "#8B0000";
      else if (lateValue > 0.10) lateColor = "#ff0000";
      else if (lateValue > 0.05) lateColor = "#ff9900";
      else lateColor = "#fff2cc";
    }
    rowColors.push(lateColor);
    rowFontColors.push("#000000");

    // Present color
    let presentColor = "#fffef7";
    if (typeof presentValue === 'number') {
      if (presentValue >= 1.0) presentColor = "#548235";
      else if (presentValue >= 0.8) presentColor = "#ffc000";
      else if (presentValue >= 0.6) presentColor = "#ff9900";
      else if (presentValue >= 0.5) presentColor = "#ff6600";
      else presentColor = "#ff0000";
    }
    rowColors.push(presentColor);
    rowFontColors.push("#000000");

    // Day Off color
    let dayOffColor = "#e0e0e0";
    if (typeof dayOffValue === 'number' && dayOffValue > 0) {
      if (dayOffValue > 10) dayOffColor = "#ffc000";
      else dayOffColor = "#f0f0f0";
    }
    rowColors.push(dayOffColor);
    rowFontColors.push("#000000");

    // Vacation color
    let vacationColor = "#e0e0e0";
    if (typeof vacationValue === 'number' && vacationValue > 0) {
      vacationColor = "#cfe2f3";
    }
    rowColors.push(vacationColor);
    rowFontColors.push("#000000");

    backgrounds.push(rowColors);
    fontColors.push(rowFontColors);
  }

  // Apply all colors at once (batch write)
  statsRange.setBackgrounds(backgrounds).setFontColors(fontColors);
}

/**
 * ‚úÖ Adds data validation (dropdown list)
 */
function addDataValidation(sheet, daysInMonth) {
  // Increase to 150 rows for 100 employees + buffer
  // Data now starts from column 3 (C) instead of 2 (B)
  const dataRange = sheet.getRange(2, 3, 150, daysInMonth);

  const rule = SpreadsheetApp.newDataValidation()
    .requireValueInList(STATUS_OPTIONS, false) // false = plain text (no arrow)
    .setAllowInvalid(false)
    .setHelpText("Select status")
    .build();

  dataRange.setDataValidation(rule);
}

/**
 * üìê –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
 */
function adjustColumnWidths(sheet, daysInMonth) {
  // –°—Ç–æ–ª–±–µ—Ü Team
  sheet.setColumnWidth(1, 80);

  // –°—Ç–æ–ª–±–µ—Ü —Å –∏–º–µ–Ω–∞–º–∏ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥–æ–Ω–∫–∞ –ø–æ–¥ –¥–∞–Ω–Ω—ã–µ
  sheet.autoResizeColumn(2);

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞ —Å –∏–º–µ–Ω–∞–º–∏
  const currentWidth = sheet.getColumnWidth(2);
  if (currentWidth < 120) {
    sheet.setColumnWidth(2, 120);
  } else if (currentWidth > 300) {
    sheet.setColumnWidth(2, 300); // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞
  }

  // –°—Ç–æ–ª–±—Ü—ã —Å –¥–Ω—è–º–∏ (–æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –∏–∫–æ–Ω–æ–∫)
  for (let col = 3; col <= daysInMonth + 2; col++) {
    sheet.setColumnWidth(col, 45);
  }

  // –°—Ç–æ–ª–±—Ü—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  sheet.setColumnWidth(daysInMonth + 3, 120); // Absent
  sheet.setColumnWidth(daysInMonth + 4, 120); // Late
  sheet.setColumnWidth(daysInMonth + 5, 130); // Present
  sheet.setColumnWidth(daysInMonth + 6, 80);  // Day Off
  sheet.setColumnWidth(daysInMonth + 7, 80);  // Vacation

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É —Å—Ç—Ä–æ–∫ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
  sheet.setRowHeight(1, 35); // –ó–∞–≥–æ–ª–æ–≤–æ–∫
  for (let row = 2; row <= EMPLOYEES.length + 1; row++) {
    sheet.setRowHeight(row, 25); // –°—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  }
}

/**
 * üé® –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ü–≤–µ—Ç–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ –∞–∫—Ç–∏–≤–Ω–æ–º—É –ª–∏—Å—Ç—É
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü
 */
function applyColorFormatting() {
  const sheet = SpreadsheetApp.getActiveSheet();
  const ui = SpreadsheetApp.getUi();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—Å—Ç –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ (—Å–æ–¥–µ—Ä–∂–∏—Ç –≥–æ–¥ 2025 –∏–ª–∏ 2026)
  const sheetName = sheet.getName();
  if (!sheetName.includes('2025') && !sheetName.includes('2026') && !sheetName.startsWith("Attendance_")) {
    ui.alert('‚ö†Ô∏è Error', 'Please select an attendance sheet', ui.ButtonSet.OK);
    return;
  }

  const lastRow = sheet.getLastRow();
  const lastCol = sheet.getLastColumn();

  if (lastRow < 2) {
    ui.alert('‚ö†Ô∏è Error', 'No data to format', ui.ButtonSet.OK);
    return;
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Å –¥–∞–Ω–Ω—ã–º–∏ (–∏—Å–∫–ª—é—á–∞—è –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É)
  const daysInMonth = lastCol - 7; // –í—ã—á–∏—Ç–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (5) + Team + –ò–º—è
  const dataRange = sheet.getRange(2, 3, lastRow - 1, daysInMonth);

  const values = dataRange.getValues();
  const backgrounds = [];

  // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Ü–≤–µ—Ç–æ–≤
  for (let row = 0; row < values.length; row++) {
    const rowColors = [];
    for (let col = 0; col < values[row].length; col++) {
      const cellValue = values[row][col].toString().trim();

      // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –ø–µ—Ä–≤–æ–º—É —Å–∏–º–≤–æ–ª—É
      let color = (row % 2 === 0) ? "#ffffff" : "#f9f9f9"; // –ß–µ—Ä–µ–¥—É—é—â–∏–µ—Å—è —Å—Ç—Ä–æ–∫–∏

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ)
      if (cellValue === "‚úÖ") {
        color = COLORS["‚úÖ"];
      } else if (cellValue === "‚è∞") {
        color = COLORS["‚è∞"];
      } else if (cellValue === "‚ùå") {
        color = COLORS["‚ùå"];
      } else if (cellValue === "üå¥") {
        color = COLORS["üå¥"];
      } else if (cellValue === "üôÜ") {
        color = COLORS["üôÜ"];
      }

      rowColors.push(color);
    }
    backgrounds.push(rowColors);
  }

  // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–∞ –æ–¥–Ω–∏–º –ø–∞–∫–µ—Ç–æ–º (–±—ã—Å—Ç—Ä–µ–µ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü)
  dataRange.setBackgrounds(backgrounds);

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è –≤—Å–µ—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–ª–æ–Ω–æ–∫
  colorStatisticsColumns(sheet, daysInMonth, lastRow - 1);

  ui.alert('‚úÖ Done!', 'Formatting applied successfully!', ui.ButtonSet.OK);
}

/**
 * üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ª–∏—Å—Ç–∞
 */
function calculateAttendance() {
  const sheet = SpreadsheetApp.getActiveSheet();
  const ui = SpreadsheetApp.getUi();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—Å—Ç –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ (—Å–æ–¥–µ—Ä–∂–∏—Ç –≥–æ–¥ 2025 –∏–ª–∏ 2026)
  const sheetName = sheet.getName();
  if (!sheetName.includes('2025') && !sheetName.includes('2026') && !sheetName.startsWith("Attendance_")) {
    ui.alert('‚ö†Ô∏è Error', 'Please select an attendance sheet', ui.ButtonSet.OK);
    return;
  }

  // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  applyColorFormatting();

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ä–º—É–ª—ã (–æ–Ω–∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
  SpreadsheetApp.flush();

  ui.alert('‚úÖ Done!', 'Statistics recalculated!', ui.ButtonSet.OK);
}

/**
 * üìä –°–æ–∑–¥–∞—ë—Ç Dashboard —Å –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
 */
function createDashboard() {
  const html = HtmlService.createHtmlOutput(getDashboardHTML())
    .setWidth(600)
    .setHeight(400);

  SpreadsheetApp.getUi().showModalDialog(html, 'üìä Create Dashboard');
}

/**
 * üé® Returns HTML for dashboard dialog
 */
function getDashboardHTML() {
  return `
<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      padding: 20px;
      background: #f8f9fa;
    }

    .form-section {
      background: white;
      border-radius: 12px;
      padding: 20px;
      margin-bottom: 16px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }

    .form-row {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 16px;
      margin-bottom: 16px;
    }

    .form-group {
      display: flex;
      flex-direction: column;
      gap: 6px;
    }

    label {
      font-size: 13px;
      font-weight: 500;
      color: #6b7280;
    }

    select {
      padding: 10px 12px;
      border: 2px solid #e5e7eb;
      border-radius: 8px;
      font-size: 14px;
      transition: border-color 0.2s;
    }

    select:focus {
      outline: none;
      border-color: #3b82f6;
    }

    .btn {
      width: 100%;
      padding: 12px;
      border: none;
      border-radius: 8px;
      background: #3b82f6;
      color: white;
      font-size: 14px;
      font-weight: 600;
      cursor: pointer;
      transition: background 0.2s;
    }

    .btn:hover {
      background: #2563eb;
    }

    .btn:disabled {
      background: #9ca3af;
      cursor: not-allowed;
    }

    .message {
      padding: 12px;
      border-radius: 8px;
      margin-bottom: 16px;
      font-size: 14px;
      display: none;
    }

    .message.error {
      background: #fee;
      color: #c00;
      display: block;
    }

    .message.success {
      background: #efe;
      color: #060;
      display: block;
    }
  </style>
</head>
<body>
  <div id="message" class="message"></div>

  <div class="form-section">
    <div class="form-row">
      <div class="form-group">
        <label>From Month</label>
        <select id="fromMonth">
          <option value="">-- Select --</option>
        </select>
      </div>

      <div class="form-group">
        <label>To Month</label>
        <select id="toMonth">
          <option value="">-- Select --</option>
        </select>
      </div>
    </div>

    <button class="btn" onclick="generateDashboard()">Generate Dashboard</button>
  </div>

  <script>
    let availableSheets = [];

    function showMessage(text, type) {
      const msg = document.getElementById('message');
      msg.textContent = text;
      msg.className = 'message ' + type;
    }

    function loadData() {
      google.script.run
        .withSuccessHandler(function(sheets) {
          availableSheets = sheets;

          const fromMonth = document.getElementById('fromMonth');
          const toMonth = document.getElementById('toMonth');

          sheets.forEach(sheet => {
            const option1 = document.createElement('option');
            option1.value = sheet;
            option1.textContent = sheet;
            fromMonth.appendChild(option1);

            const option2 = document.createElement('option');
            option2.value = sheet;
            option2.textContent = sheet;
            toMonth.appendChild(option2);
          });
        })
        .withFailureHandler(function(error) {
          showMessage('Error loading data: ' + error.message, 'error');
        })
        .getAvailableMonthSheets();
    }

    function generateDashboard() {
      const fromMonth = document.getElementById('fromMonth').value;
      const toMonth = document.getElementById('toMonth').value;

      if (!fromMonth || !toMonth) {
        showMessage('Please select both months', 'error');
        return;
      }

      document.querySelector('.btn').disabled = true;
      document.querySelector('.btn').textContent = 'Generating...';

      google.script.run
        .withSuccessHandler(function() {
          showMessage('Dashboard created successfully!', 'success');
          document.querySelector('.btn').disabled = false;
          document.querySelector('.btn').textContent = 'Generate Dashboard';
          setTimeout(function() {
            google.script.host.close();
          }, 1500);
        })
        .withFailureHandler(function(error) {
          showMessage('Error: ' + error.message, 'error');
          document.querySelector('.btn').disabled = false;
          document.querySelector('.btn').textContent = 'Generate Dashboard';
        })
        .generateDashboardSheet(fromMonth, toMonth);
    }

    window.onload = loadData;
  </script>
</body>
</html>
  `;
}

/**
 * üìã Get available month sheets
 */
function getAvailableMonthSheets() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  return ss.getSheets()
    .map(sheet => sheet.getName())
    .filter(name => name.includes('2025') || name.includes('2026') || name.includes('2024'))
    .sort();
}

/**
 * üìä Generate dashboard sheet with employee statistics
 */
function generateDashboardSheet(fromMonth, toMonth) {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const ui = SpreadsheetApp.getUi();

  const dashboardName = "üìä Dashboard";

  // Delete old dashboard if exists
  const existingDashboard = ss.getSheetByName(dashboardName);
  if (existingDashboard) {
    ss.deleteSheet(existingDashboard);
  }

  // Create new dashboard
  const dashboard = ss.insertSheet(dashboardName, 0);

  // Get all sheets in range
  const allSheets = ss.getSheets()
    .map(sheet => sheet.getName())
    .filter(name => name.includes('2025') || name.includes('2026') || name.includes('2024'))
    .sort();

  const fromIndex = allSheets.indexOf(fromMonth);
  const toIndex = allSheets.indexOf(toMonth);

  if (fromIndex === -1 || toIndex === -1) {
    throw new Error('Invalid month range');
  }

  const sheetsInRange = allSheets.slice(fromIndex, toIndex + 1);

  // Build headers
  const headers = ["Team", "Employee"];
  sheetsInRange.forEach(sheetName => {
    headers.push(sheetName + " Absent");
    headers.push(sheetName + " Late");
    headers.push(sheetName + " Present");
    headers.push(sheetName + " Day Off");
    headers.push(sheetName + " Vacation");
  });

  // Write headers
  dashboard.getRange(1, 1, 1, headers.length).setValues([headers]);

  // Get all employees
  const employees = getSavedEmployees();

  // Collect data for each employee
  const dataRows = [];

  employees.forEach(emp => {
    const team = emp[0];
    const name = emp[1];
    const row = [team, name];

    sheetsInRange.forEach(sheetName => {
      const sheet = ss.getSheetByName(sheetName);
      if (!sheet) {
        row.push("", "", "", "", "");
        return;
      }

      const lastRow = sheet.getLastRow();
      if (lastRow < 2) {
        row.push("", "", "", "", "");
        return;
      }

      // Find employee row
      const nameColumn = sheet.getRange(2, 2, lastRow - 1, 1).getValues();
      let employeeRow = -1;

      for (let i = 0; i < nameColumn.length; i++) {
        if (nameColumn[i][0] === name) {
          employeeRow = i + 2;
          break;
        }
      }

      if (employeeRow === -1) {
        row.push("", "", "", "", "");
        return;
      }

      // Get statistics columns
      const lastCol = sheet.getLastColumn();
      const absentCol = lastCol - 4;
      const lateCol = lastCol - 3;
      const presentCol = lastCol - 2;
      const dayOffCol = lastCol - 1;
      const vacationCol = lastCol;

      const absentVal = sheet.getRange(employeeRow, absentCol).getValue();
      const lateVal = sheet.getRange(employeeRow, lateCol).getValue();
      const presentVal = sheet.getRange(employeeRow, presentCol).getValue();
      const dayOffVal = sheet.getRange(employeeRow, dayOffCol).getValue();
      const vacationVal = sheet.getRange(employeeRow, vacationCol).getValue();

      row.push(absentVal, lateVal, presentVal, dayOffVal, vacationVal);
    });

    dataRows.push(row);
  });

  // Write data
  if (dataRows.length > 0) {
    dashboard.getRange(2, 1, dataRows.length, headers.length).setValues(dataRows);
  }

  // Format dashboard
  formatDashboard(dashboard, headers.length, dataRows.length, sheetsInRange.length);

  ss.setActiveSheet(dashboard);
}

/**
 * üé® Format dashboard with colors
 */
function formatDashboard(sheet, numCols, numRows, numMonths) {
  // Header formatting
  sheet.getRange(1, 1, 1, numCols)
    .setBackground(COLORS.header)
    .setFontWeight("bold")
    .setFontSize(10)
    .setHorizontalAlignment("center")
    .setVerticalAlignment("middle")
    .setWrap(true);

  // Freeze first row and first two columns
  sheet.setFrozenRows(1);
  sheet.setFrozenColumns(2);

  // Set column widths
  sheet.setColumnWidth(1, 100); // Team
  sheet.setColumnWidth(2, 150); // Employee

  // Set width for stat columns
  for (let i = 3; i <= numCols; i++) {
    sheet.setColumnWidth(i, 80);
  }

  if (numRows === 0) return;

  // Format data cells
  sheet.getRange(2, 1, numRows, numCols)
    .setHorizontalAlignment("center")
    .setVerticalAlignment("middle")
    .setFontSize(9);

  // Format team and employee names
  sheet.getRange(2, 1, numRows, 2)
    .setHorizontalAlignment("left")
    .setFontWeight("bold");

  // Apply colors to statistics
  const employees = getSavedEmployees();

  // Color team cells
  const teamColors = {
    "Team 1": "#548235",
    "Team 2": "#ffc000",
    "Team 3": "#4472c4",
    "Team 4": "#ffff00",
    "Team 5": "#674ea7"
  };

  for (let i = 0; i < numRows; i++) {
    const team = employees[i][0];
    const teamColor = teamColors[team] || "#ffffff";

    sheet.getRange(i + 2, 1, 1, 2)
      .setBackground(teamColor)
      .setFontColor("#000000");
  }

  // Color statistics columns
  for (let monthIdx = 0; monthIdx < numMonths; monthIdx++) {
    const baseCol = 3 + (monthIdx * 5);

    // Read all values for this month
    const absentRange = sheet.getRange(2, baseCol, numRows, 1);
    const lateRange = sheet.getRange(2, baseCol + 1, numRows, 1);
    const presentRange = sheet.getRange(2, baseCol + 2, numRows, 1);
    const dayOffRange = sheet.getRange(2, baseCol + 3, numRows, 1);
    const vacationRange = sheet.getRange(2, baseCol + 4, numRows, 1);

    const absentVals = absentRange.getValues();
    const lateVals = lateRange.getValues();
    const presentVals = presentRange.getValues();
    const dayOffVals = dayOffRange.getValues();
    const vacationVals = vacationRange.getValues();

    const absentColors = [];
    const lateColors = [];
    const presentColors = [];
    const dayOffColors = [];
    const vacationColors = [];

    for (let i = 0; i < numRows; i++) {
      // Absent color
      const absentVal = absentVals[i][0];
      let absentColor = "#548235";
      if (typeof absentVal === 'number' && absentVal > 0) {
        if (absentVal > 0.15) absentColor = "#8B0000";
        else if (absentVal > 0.10) absentColor = "#ff0000";
        else if (absentVal > 0.05) absentColor = "#ff9900";
        else absentColor = "#fff2cc";
      }
      absentColors.push([absentColor]);

      // Late color
      const lateVal = lateVals[i][0];
      let lateColor = "#548235";
      if (typeof lateVal === 'number' && lateVal > 0) {
        if (lateVal > 0.15) lateColor = "#8B0000";
        else if (lateVal > 0.10) lateColor = "#ff0000";
        else if (lateVal > 0.05) lateColor = "#ff9900";
        else lateColor = "#fff2cc";
      }
      lateColors.push([lateColor]);

      // Present color
      const presentVal = presentVals[i][0];
      let presentColor = "#fffef7";
      if (typeof presentVal === 'number') {
        if (presentVal >= 1.0) presentColor = "#548235";
        else if (presentVal >= 0.8) presentColor = "#ffc000";
        else if (presentVal >= 0.6) presentColor = "#ff9900";
        else if (presentVal >= 0.5) presentColor = "#ff6600";
        else presentColor = "#ff0000";
      }
      presentColors.push([presentColor]);

      // Day Off color
      const dayOffVal = dayOffVals[i][0];
      let dayOffColor = "#e0e0e0";
      if (typeof dayOffVal === 'number' && dayOffVal > 0) {
        if (dayOffVal > 10) dayOffColor = "#ffc000";
        else dayOffColor = "#f0f0f0";
      }
      dayOffColors.push([dayOffColor]);

      // Vacation color
      const vacationVal = vacationVals[i][0];
      let vacationColor = "#e0e0e0";
      if (typeof vacationVal === 'number' && vacationVal > 0) {
        vacationColor = "#cfe2f3";
      }
      vacationColors.push([vacationColor]);
    }

    // Apply colors
    absentRange.setBackgrounds(absentColors).setFontColor("#000000").setNumberFormat("0.0%");
    lateRange.setBackgrounds(lateColors).setFontColor("#000000").setNumberFormat("0.0%");
    presentRange.setBackgrounds(presentColors).setFontColor("#000000").setNumberFormat("0.0%");
    dayOffRange.setBackgrounds(dayOffColors).setFontColor("#000000").setNumberFormat("0");
    vacationRange.setBackgrounds(vacationColors).setFontColor("#000000").setNumberFormat("0");
  }

  // Add borders
  sheet.getRange(1, 1, numRows + 1, numCols)
    .setBorder(true, true, true, true, true, true, "#000000", SpreadsheetApp.BorderStyle.SOLID_MEDIUM);
}

/**
 * üî¢ Determines number of days in month
 */
function getDaysInMonth(month, year) {
  // Map short month names to month indices
  const months = {
    "JAN": 0, "FEB": 1, "MAR": 2, "APR": 3,
    "MAY": 4, "JUN": 5, "JUL": 6, "AUG": 7,
    "SEP": 8, "OCT": 9, "NOV": 10, "DEC": 11
  };

  const monthIndex = months[month.toUpperCase()] || 9; // Default to October
  const yearNum = parseInt(year) || new Date().getFullYear(); // Use provided year or current year

  // Create date and get number of days
  const date = new Date(yearNum, monthIndex + 1, 0);
  return date.getDate();
}

/**
 * üî§ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–±—Ü–∞ –≤ –±—É–∫–≤—É
 */
function columnToLetter(column) {
  let temp, letter = '';
  while (column > 0) {
    temp = (column - 1) % 26;
    letter = String.fromCharCode(temp + 65) + letter;
    column = (column - temp - 1) / 26;
  }
  return letter;
}

/**
 * üíæ –ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
 */
function getSavedEmployees() {
  const props = PropertiesService.getDocumentProperties();
  const saved = props.getProperty('EMPLOYEES_LIST');

  if (saved) {
    return JSON.parse(saved);
  }

  // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫
  return EMPLOYEES;
}

/**
 * üíæ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
 */
function saveEmployees(employees) {
  const props = PropertiesService.getDocumentProperties();
  props.setProperty('EMPLOYEES_LIST', JSON.stringify(employees));
}

/**
 * üë• –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
 */
function showEmployeeManager() {
  const html = HtmlService.createHtmlOutput(getEmployeeManagerHTML())
    .setWidth(700)
    .setHeight(600);

  SpreadsheetApp.getUi().showModalDialog(html, 'üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏');
}

/**
 * üìã –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
function getEmployeesList() {
  const employees = getSavedEmployees();

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
  const teams = {};
  employees.forEach(emp => {
    const team = emp[0];
    const name = emp[1];
    if (!teams[team]) {
      teams[team] = [];
    }
    teams[team].push(name);
  });

  return teams;
}

/**
 * ‚ûï Adds new employees to team
 */
function addEmployeesToTeam(team, namesString) {
  const employees = getSavedEmployees();

  // Parse names (separated by newline or comma)
  const names = namesString
    .split(/[\n,]+/)
    .map(name => name.trim())
    .filter(name => name.length > 0);

  if (names.length === 0) {
    throw new Error('No employee names provided');
  }

  // Create a set of existing names (case-insensitive) for duplicate detection
  const existingNames = new Set(
    employees.map(emp => emp[1].toLowerCase().trim())
  );

  // Filter out duplicates
  const uniqueNames = [];
  const duplicates = [];

  names.forEach(name => {
    const nameLower = name.toLowerCase().trim();
    if (existingNames.has(nameLower)) {
      duplicates.push(name);
    } else {
      uniqueNames.push(name);
      existingNames.add(nameLower); // Add to set to avoid duplicates within the current batch
    }
  });

  if (uniqueNames.length === 0) {
    throw new Error('All names already exist in the system. Duplicates: ' + duplicates.join(', '));
  }

  // Find position to insert (after last employee of this team)
  let insertIndex = employees.length;
  for (let i = employees.length - 1; i >= 0; i--) {
    if (employees[i][0] === team) {
      insertIndex = i + 1;
      break;
    }
  }

  // If team not found, add to end
  if (insertIndex === employees.length) {
    const teamExists = employees.some(emp => emp[0] === team);
    if (!teamExists && employees.length > 0) {
      insertIndex = employees.length;
    }
  }

  // Add new employees
  const newEmployees = uniqueNames.map(name => [team, name]);
  employees.splice(insertIndex, 0, ...newEmployees);

  saveEmployees(employees);

  let message = `Added ${uniqueNames.length} employee(s) to ${team}`;
  if (duplicates.length > 0) {
    message += `. Skipped ${duplicates.length} duplicate(s): ${duplicates.join(', ')}`;
  }

  return {
    success: true,
    message: message,
    count: uniqueNames.length,
    duplicates: duplicates
  };
}

/**
 * üîÑ –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ –¥—Ä—É–≥—É—é –∫–æ–º–∞–Ω–¥—É
 */
function moveEmployeeToTeam(employeeName, fromTeam, toTeam) {
  const employees = getSavedEmployees();

  // –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ —Å—Ç–∞—Ä–æ–π –∫–æ–º–∞–Ω–¥—ã
  const index = employees.findIndex(emp => emp[0] === fromTeam && emp[1] === employeeName);

  if (index === -1) {
    throw new Error('–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }

  employees.splice(index, 1);

  // –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
  let insertIndex = employees.length;
  for (let i = employees.length - 1; i >= 0; i--) {
    if (employees[i][0] === toTeam) {
      insertIndex = i + 1;
      break;
    }
  }

  // –í—Å—Ç–∞–≤–ª—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
  employees.splice(insertIndex, 0, [toTeam, employeeName]);

  saveEmployees(employees);

  return {
    success: true,
    message: `${employeeName} –ø–µ—Ä–µ–º–µ—â–µ–Ω –∏–∑ ${fromTeam} –≤ ${toTeam}`
  };
}

/**
 * üóëÔ∏è –£–¥–∞–ª—è–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
 */
function deleteEmployee(employeeName, team) {
  const employees = getSavedEmployees();

  const index = employees.findIndex(emp => emp[0] === team && emp[1] === employeeName);

  if (index === -1) {
    throw new Error('–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }

  employees.splice(index, 1);
  saveEmployees(employees);

  return {
    success: true,
    message: `${employeeName} —É–¥–∞–ª–µ–Ω –∏–∑ ${team}`
  };
}

/**
 * ‚úèÔ∏è Shows rename employee dialog
 */
function showRenameEmployeeDialog() {
  const html = HtmlService.createHtmlOutput(getRenameEmployeeHTML())
    .setWidth(500)
    .setHeight(400);

  SpreadsheetApp.getUi().showModalDialog(html, '‚úèÔ∏è Rename Employee');
}

/**
 * üé® Returns HTML for rename employee dialog
 */
function getRenameEmployeeHTML() {
  return `
<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      padding: 24px;
      background: #f8f9fa;
    }

    .container {
      max-width: 100%;
    }

    .form-group {
      margin-bottom: 20px;
    }

    label {
      display: block;
      font-size: 13px;
      font-weight: 500;
      color: #6b7280;
      margin-bottom: 6px;
    }

    select, input {
      width: 100%;
      padding: 10px 12px;
      border: 2px solid #e5e7eb;
      border-radius: 8px;
      font-size: 14px;
      font-family: inherit;
      transition: border-color 0.2s;
    }

    select:focus, input:focus {
      outline: none;
      border-color: #3b82f6;
    }

    .btn {
      width: 100%;
      padding: 12px;
      border: none;
      border-radius: 8px;
      background: #3b82f6;
      color: white;
      font-size: 14px;
      font-weight: 600;
      cursor: pointer;
      transition: background 0.2s;
    }

    .btn:hover {
      background: #2563eb;
    }

    .btn:disabled {
      background: #9ca3af;
      cursor: not-allowed;
    }

    .message {
      padding: 12px;
      border-radius: 8px;
      font-size: 14px;
      margin-bottom: 16px;
      display: none;
    }

    .message.success {
      background: #d1fae5;
      color: #065f46;
      display: block;
    }

    .message.error {
      background: #fee2e2;
      color: #991b1b;
      display: block;
    }

    .employee-info {
      padding: 12px;
      background: #f3f4f6;
      border-radius: 8px;
      margin-bottom: 16px;
      font-size: 14px;
      color: #374151;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="message" id="message"></div>

    <div class="form-group">
      <label>Select Team</label>
      <select id="teamSelect" onchange="loadEmployees()">
        <option value="">-- Select Team --</option>
        <option value="Team 1">Team 1</option>
        <option value="Team 2">Team 2</option>
        <option value="Team 3">Team 3</option>
        <option value="Team 4">Team 4</option>
        <option value="Team 5">Team 5</option>
      </select>
    </div>

    <div class="form-group">
      <label>Select Employee</label>
      <select id="employeeSelect" disabled>
        <option value="">-- Select Employee --</option>
      </select>
    </div>

    <div class="form-group">
      <label>New Name</label>
      <input type="text" id="newNameInput" placeholder="Enter new name">
    </div>

    <button class="btn" id="renameBtn" onclick="renameEmployee()">Rename Employee</button>
  </div>

  <script>
    let teamsData = {};

    function showMessage(text, type) {
      const msg = document.getElementById('message');
      msg.textContent = text;
      msg.className = 'message ' + type;
      setTimeout(() => {
        msg.style.display = 'none';
      }, 5000);
    }

    function loadEmployees() {
      const team = document.getElementById('teamSelect').value;
      const employeeSelect = document.getElementById('employeeSelect');

      if (!team) {
        employeeSelect.disabled = true;
        employeeSelect.innerHTML = '<option value="">-- Select Employee --</option>';
        return;
      }

      employeeSelect.disabled = true;
      employeeSelect.innerHTML = '<option value="">Loading...</option>';

      google.script.run
        .withSuccessHandler(function(teams) {
          teamsData = teams;
          const employees = teams[team] || [];

          employeeSelect.innerHTML = '<option value="">-- Select Employee --</option>';
          employees.forEach(name => {
            if (name) { // Only show non-empty names
              const option = document.createElement('option');
              option.value = name;
              option.textContent = name;
              employeeSelect.appendChild(option);
            }
          });

          employeeSelect.disabled = false;
        })
        .withFailureHandler(function(error) {
          showMessage('Error loading employees: ' + error.message, 'error');
          employeeSelect.disabled = false;
        })
        .getEmployeesList();
    }

    function renameEmployee() {
      const team = document.getElementById('teamSelect').value;
      const oldName = document.getElementById('employeeSelect').value;
      const newName = document.getElementById('newNameInput').value.trim();

      if (!team || !oldName || !newName) {
        showMessage('Please fill all fields', 'error');
        return;
      }

      const btn = document.getElementById('renameBtn');
      btn.disabled = true;
      btn.textContent = 'Renaming...';

      google.script.run
        .withSuccessHandler(function(result) {
          showMessage(result.message, 'success');
          btn.disabled = false;
          btn.textContent = 'Rename Employee';

          // Clear form
          document.getElementById('newNameInput').value = '';

          // Reload employees
          loadEmployees();

          // Close dialog after 2 seconds
          setTimeout(() => {
            google.script.host.close();
          }, 2000);
        })
        .withFailureHandler(function(error) {
          showMessage('Error: ' + error.message, 'error');
          btn.disabled = false;
          btn.textContent = 'Rename Employee';
        })
        .renameEmployeeAcrossAllSheets(oldName, newName, team);
    }
  </script>
</body>
</html>
  `;
}

/**
 * ‚úèÔ∏è Renames employee across all sheets (optimized)
 */
function renameEmployeeAcrossAllSheets(oldName, newName, team) {
  // First, update in the saved employees list
  const employees = getSavedEmployees();
  const index = employees.findIndex(emp => emp[0] === team && emp[1] === oldName);

  if (index === -1) {
    throw new Error('Employee not found');
  }

  employees[index][1] = newName;
  saveEmployees(employees);

  // Then, update in all existing sheets using batch operations
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheets = ss.getSheets();
  let updatedSheets = 0;

  // Batch all updates together
  sheets.forEach(sheet => {
    // Skip non-attendance sheets
    const sheetName = sheet.getName();
    if (!sheetName.includes('2025') && !sheetName.includes('2026')) {
      return;
    }

    // Use TextFinder for much faster search and replace
    const textFinder = sheet.createTextFinder(oldName)
      .matchEntireCell(true)
      .matchCase(true);

    const occurrences = textFinder.findAll();

    if (occurrences.length > 0) {
      // Only replace in column 2 (Name column)
      occurrences.forEach(range => {
        if (range.getColumn() === 2) {
          range.setValue(newName);
        }
      });
      updatedSheets++;
    }
  });

  return {
    success: true,
    message: '"' + oldName + '" renamed to "' + newName + '" in ' + updatedSheets + ' sheet(s)'
  };
}

/**
 * üóëÔ∏è Deletes all employees
 */
function deleteAllEmployees() {
  // Clear the employees list
  saveEmployees([]);

  return {
    success: true,
    message: 'All employees deleted successfully'
  };
}

/**
 * üìà Shows employee report dialog
 */
function showEmployeeReportDialog() {
  const html = HtmlService.createHtmlOutput(getEmployeeReportHTML())
    .setWidth(800)
    .setHeight(700);

  SpreadsheetApp.getUi().showModalDialog(html, 'üìà Employee Report');
}

/**
 * üé® Returns HTML for employee report dialog
 */
function getEmployeeReportHTML() {
  return `
<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      padding: 20px;
      background: #f8f9fa;
    }

    .form-section {
      background: white;
      border-radius: 12px;
      padding: 20px;
      margin-bottom: 16px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }

    .form-row {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 16px;
      margin-bottom: 16px;
    }

    .form-group {
      display: flex;
      flex-direction: column;
      gap: 6px;
    }

    label {
      font-size: 13px;
      font-weight: 500;
      color: #6b7280;
    }

    select {
      padding: 10px 12px;
      border: 2px solid #e5e7eb;
      border-radius: 8px;
      font-size: 14px;
      transition: border-color 0.2s;
    }

    select:focus {
      outline: none;
      border-color: #3b82f6;
    }

    .btn {
      width: 100%;
      padding: 12px;
      border: none;
      border-radius: 8px;
      background: #3b82f6;
      color: white;
      font-size: 14px;
      font-weight: 600;
      cursor: pointer;
      transition: background 0.2s;
    }

    .btn:hover {
      background: #2563eb;
    }

    .btn:disabled {
      background: #9ca3af;
      cursor: not-allowed;
    }

    #reportContent {
      background: white;
      border-radius: 12px;
      padding: 20px;
      display: none;
      max-height: 500px;
      overflow-y: auto;
    }

    .report-header {
      border-bottom: 2px solid #e5e7eb;
      padding-bottom: 12px;
      margin-bottom: 16px;
    }

    .report-title {
      font-size: 18px;
      font-weight: 600;
      color: #1f2937;
    }

    .month-section {
      margin-bottom: 24px;
      padding: 16px;
      background: #f9fafb;
      border-radius: 8px;
      border-left: 4px solid #3b82f6;
    }

    .month-title {
      font-size: 16px;
      font-weight: 600;
      color: #1f2937;
      margin-bottom: 12px;
    }

    .stats-grid {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 12px;
    }

    .stat-item {
      display: flex;
      justify-content: space-between;
      padding: 8px 12px;
      background: white;
      border-radius: 6px;
      border: 1px solid #e5e7eb;
    }

    .stat-label {
      font-size: 14px;
      color: #6b7280;
    }

    .stat-value {
      font-size: 14px;
      font-weight: 600;
      color: #1f2937;
    }

    .total-section {
      margin-top: 24px;
      padding: 20px;
      background: #eff6ff;
      border-radius: 8px;
      border: 2px solid #3b82f6;
    }

    .total-title {
      font-size: 18px;
      font-weight: 700;
      color: #1f2937;
      margin-bottom: 16px;
    }

    .loading {
      text-align: center;
      padding: 40px;
      color: #6b7280;
    }

    .message {
      padding: 12px;
      border-radius: 8px;
      font-size: 14px;
      margin-bottom: 16px;
      display: none;
    }

    .message.error {
      background: #fee2e2;
      color: #991b1b;
      display: block;
    }
  </style>
</head>
<body>
  <div class="message" id="message"></div>

  <div class="form-section">
    <div class="form-group" style="margin-bottom: 16px;">
      <label>Select Employee</label>
      <select id="employeeSelect">
        <option value="">-- Select Employee --</option>
      </select>
    </div>

    <div class="form-row">
      <div class="form-group">
        <label>From Month</label>
        <select id="fromMonth">
          <option value="">-- Select --</option>
        </select>
      </div>

      <div class="form-group">
        <label>To Month</label>
        <select id="toMonth">
          <option value="">-- Select --</option>
        </select>
      </div>
    </div>

    <button class="btn" onclick="generateReport()">Generate Report</button>
  </div>

  <div id="reportContent"></div>

  <script>
    let employees = [];
    let availableSheets = [];

    function showMessage(text) {
      const msg = document.getElementById('message');
      msg.textContent = text;
      msg.className = 'message error';
    }

    function loadData() {
      google.script.run
        .withSuccessHandler(function(data) {
          employees = data.employees;
          availableSheets = data.sheets;

          // Populate employees
          const employeeSelect = document.getElementById('employeeSelect');
          employees.forEach(emp => {
            if (emp.name) {
              const option = document.createElement('option');
              option.value = emp.name;
              option.textContent = emp.name + ' (' + emp.team + ')';
              employeeSelect.appendChild(option);
            }
          });

          // Populate month selects
          const fromMonth = document.getElementById('fromMonth');
          const toMonth = document.getElementById('toMonth');

          availableSheets.forEach(sheet => {
            const option1 = document.createElement('option');
            option1.value = sheet;
            option1.textContent = sheet;
            fromMonth.appendChild(option1);

            const option2 = document.createElement('option');
            option2.value = sheet;
            option2.textContent = sheet;
            toMonth.appendChild(option2);
          });
        })
        .withFailureHandler(function(error) {
          showMessage('Error loading data: ' + error.message);
        })
        .getReportData();
    }

    function generateReport() {
      const employeeName = document.getElementById('employeeSelect').value;
      const fromMonth = document.getElementById('fromMonth').value;
      const toMonth = document.getElementById('toMonth').value;

      if (!employeeName || !fromMonth || !toMonth) {
        showMessage('Please fill all fields');
        return;
      }

      const reportContent = document.getElementById('reportContent');
      reportContent.innerHTML = '<div class="loading">Generating report...</div>';
      reportContent.style.display = 'block';

      google.script.run
        .withSuccessHandler(function(report) {
          displayReport(report);
        })
        .withFailureHandler(function(error) {
          reportContent.innerHTML = '<div class="loading">Error: ' + error.message + '</div>';
        })
        .generateEmployeeReport(employeeName, fromMonth, toMonth);
    }

    function displayReport(report) {
      const reportContent = document.getElementById('reportContent');

      let html = \`
        <div class="report-header">
          <div class="report-title">\${report.employeeName} (\${report.team})</div>
          <div style="color: #6b7280; font-size: 14px; margin-top: 4px;">
            Period: \${report.fromMonth} - \${report.toMonth}
          </div>
        </div>
      \`;

      // Monthly details
      report.months.forEach(month => {
        html += \`
          <div class="month-section">
            <div class="month-title">\${month.name}</div>
            <div class="stats-grid">
              <div class="stat-item">
                <span class="stat-label">Days Worked:</span>
                <span class="stat-value">\${month.daysWorked}</span>
              </div>
              <div class="stat-item">
                <span class="stat-label">Absent:</span>
                <span class="stat-value">\${month.absent}</span>
              </div>
              <div class="stat-item">
                <span class="stat-label">Late:</span>
                <span class="stat-value">\${month.late}</span>
              </div>
              <div class="stat-item">
                <span class="stat-label">Day Off:</span>
                <span class="stat-value">\${month.dayOff}</span>
              </div>
              <div class="stat-item">
                <span class="stat-label">Vacation:</span>
                <span class="stat-value">\${month.vacation}</span>
              </div>
              <div class="stat-item">
                <span class="stat-label">Attendance:</span>
                <span class="stat-value">\${month.attendance}</span>
              </div>
            </div>
          </div>
        \`;
      });

      // Total summary
      html += \`
        <div class="total-section">
          <div class="total-title">üìä Total Summary</div>
          <div class="stats-grid">
            <div class="stat-item">
              <span class="stat-label">Total Days Worked:</span>
              <span class="stat-value">\${report.total.daysWorked}</span>
            </div>
            <div class="stat-item">
              <span class="stat-label">Total Absent:</span>
              <span class="stat-value">\${report.total.absent}</span>
            </div>
            <div class="stat-item">
              <span class="stat-label">Total Late:</span>
              <span class="stat-value">\${report.total.late}</span>
            </div>
            <div class="stat-item">
              <span class="stat-label">Total Day Off:</span>
              <span class="stat-value">\${report.total.dayOff}</span>
            </div>
            <div class="stat-item">
              <span class="stat-label">Total Vacation:</span>
              <span class="stat-value">\${report.total.vacation}</span>
            </div>
            <div class="stat-item">
              <span class="stat-label">Average Attendance:</span>
              <span class="stat-value">\${report.total.attendance}</span>
            </div>
          </div>
        </div>
      \`;

      reportContent.innerHTML = html;
    }

    window.onload = loadData;
  </script>
</body>
</html>
  `;
}

/**
 * üìä Get data for employee report
 */
function getReportData() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const employees = getSavedEmployees();

  // Get all attendance sheets
  const sheets = ss.getSheets()
    .map(sheet => sheet.getName())
    .filter(name => name.includes('2025') || name.includes('2026'))
    .sort();

  // Format employees
  const employeeList = employees
    .filter(emp => emp[1]) // Only non-empty names
    .map(emp => ({
      name: emp[1],
      team: emp[0]
    }));

  return {
    employees: employeeList,
    sheets: sheets
  };
}

/**
 * üìà Generate employee report
 */
function generateEmployeeReport(employeeName, fromMonth, toMonth) {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const employees = getSavedEmployees();

  // Find employee team
  const employee = employees.find(emp => emp[1] === employeeName);
  if (!employee) {
    throw new Error('Employee not found');
  }

  const team = employee[0];

  // Get all sheets in range
  const allSheets = ss.getSheets()
    .map(sheet => sheet.getName())
    .filter(name => name.includes('2025') || name.includes('2026'))
    .sort();

  const fromIndex = allSheets.indexOf(fromMonth);
  const toIndex = allSheets.indexOf(toMonth);

  if (fromIndex === -1 || toIndex === -1) {
    throw new Error('Invalid month range');
  }

  const sheetsInRange = allSheets.slice(fromIndex, toIndex + 1);

  // Collect data for each month
  const monthsData = [];
  let totalDaysWorked = 0;
  let totalAbsent = 0;
  let totalLate = 0;
  let totalDayOff = 0;
  let totalVacation = 0;
  let totalAttendance = 0;
  let monthCount = 0;

  sheetsInRange.forEach(sheetName => {
    const sheet = ss.getSheetByName(sheetName);
    if (!sheet) return;

    const lastRow = sheet.getLastRow();
    if (lastRow < 2) return;

    // Find employee row
    const nameColumn = sheet.getRange(2, 2, lastRow - 1, 1).getValues();
    let employeeRow = -1;

    for (let i = 0; i < nameColumn.length; i++) {
      if (nameColumn[i][0] === employeeName) {
        employeeRow = i + 2;
        break;
      }
    }

    if (employeeRow === -1) return;

    // Get statistics
    const lastCol = sheet.getLastColumn();
    const absentCol = lastCol - 4;
    const lateCol = lastCol - 3;
    const presentCol = lastCol - 2;
    const dayOffCol = lastCol - 1;
    const vacationCol = lastCol;

    const absentVal = sheet.getRange(employeeRow, absentCol).getValue();
    const lateVal = sheet.getRange(employeeRow, lateCol).getValue();
    const presentVal = sheet.getRange(employeeRow, presentCol).getValue();
    const dayOffVal = sheet.getRange(employeeRow, dayOffCol).getValue();
    const vacationVal = sheet.getRange(employeeRow, vacationCol).getValue();

    // Count days in month
    const daysInMonth = lastCol - 7;
    const daysWorked = Math.round(daysInMonth * (presentVal || 0));

    monthsData.push({
      name: sheetName,
      daysWorked: daysWorked,
      absent: (absentVal * 100).toFixed(1) + '%',
      late: (lateVal * 100).toFixed(1) + '%',
      dayOff: dayOffVal,
      vacation: vacationVal,
      attendance: (presentVal * 100).toFixed(1) + '%'
    });

    totalDaysWorked += daysWorked;
    totalAbsent += absentVal;
    totalLate += lateVal;
    totalDayOff += dayOffVal;
    totalVacation += vacationVal;
    totalAttendance += presentVal;
    monthCount++;
  });

  return {
    employeeName: employeeName,
    team: team,
    fromMonth: fromMonth,
    toMonth: toMonth,
    months: monthsData,
    total: {
      daysWorked: totalDaysWorked,
      absent: ((totalAbsent / monthCount) * 100).toFixed(1) + '%',
      late: ((totalLate / monthCount) * 100).toFixed(1) + '%',
      dayOff: totalDayOff,
      vacation: totalVacation,
      attendance: ((totalAttendance / monthCount) * 100).toFixed(1) + '%'
    }
  };
}

/**
 * üß™ –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–º–µ—Ä–∞
 */
function createTestSheet() {
  createAttendanceSheet("–û–∫—Ç—è–±—Ä—å 2025");
}

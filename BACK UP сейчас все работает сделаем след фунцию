/* ===== Dispatch System ‚Äî FULL SCRIPT (READY + UNDERGROSS) ===== */
/* eslint-disable no-unused-vars */

/************** READY CONFIG **************/
const TEAMS = ['Team 1','Team 2','Team 3','Team 4','Team 5'];
const DATA_START_ROW = 3; // –¥–∞–Ω–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏

// –æ—Ç—Ç–µ–Ω–∫–∏ ¬´–∫—Ä–∞—Å–Ω—ã–π ready¬ª
const REDS = new Set([
  '#ff0000','#ff5b5b','#ff6666','#f44336','#ea4335','#d32f2f','#e06666','#ea9999'
]);

// –Ω–µ–¥–µ–ª—å–Ω—ã–µ –±–ª–æ–∫–∏: AK..AR ‚Äî 7 –¥–Ω–µ–π; AS ‚Äî WEEK; AU ‚Äî NOTES; —à–∞–≥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–ª–æ–∫–∞ = 12
const FIRST_BLOCK_START = 'AK';
const BLOCK_STEP = 12;   // AK..AS, AW..BE, BI..BQ, ...
const DAYS_IN_WEEK = 7;  // AK..AR (7 –¥–Ω–µ–π)

/************** UNDERGROSS CONFIG **************/
const UG_DATA_START_ROW = 3;
const BASE_RANK_COLS = ['H','I','J','K','U','AG']; // –±–∞–∑–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è
const WEEK_BLOCK_WIDTH = 12;                        // —à–∞–≥ –±–ª–æ–∫–æ–≤
const WEEK_DAYS_LEN = 7;                            // AK..AR
const WEEK_GROSS_OFFSET = 8;                        // WEEK = start + 8 (AS = AK+8)
const UG_THRESHOLD = 7000;                          // —Ñ–∏–ª—å—Ç—Ä < 7000 –ø–æ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–µ
const TEAM_NAME_PATTERN = /^Team\s+\d+/i;           // Team 1..5

/************** MENU **************/
function onOpen() {
  SpreadsheetApp.getUi()
    .createMenu('Dispatch')
    .addItem('READY (FAST, dynamic week block)', 'buildReadyDynamicFast')
    .addItem('READY Last 2 Days Only', 'buildReadyLast2DaysOnly')
    .addSeparator()
    .addItem('Underperformed (auto last week)', 'buildUnderGrossReports')
    .addSeparator()
    .addItem('üß® RED BUTTON: Clean extra reports', 'redButtonCleanup')
    .addToUi();
}

/************** READY: MAIN **************/
function buildReadyDynamicFast() {
  const ss = SpreadsheetApp.getActive();
  const tz = ss.getSpreadsheetTimeZone();
  const stamp = Utilities.formatDate(new Date(), tz, 'yyyy-MM-dd');
  const outName = `READY ${stamp}`;

  let out = ss.getSheetByName(outName);
  if (!out) out = ss.insertSheet(outName);
  out.clear({contentsOnly:true});

  // —à–∞–ø–∫–∞ ‚Äî —Å –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Å—Ç–∞, –≥–¥–µ –Ω–∞–π–¥—ë—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–π –±–ª–æ–∫
  let headerSet = false;
  for (const t of TEAMS) {
    const sh = ss.getSheetByName(t);
    if (!sh) continue;
    const block = findActiveWeekBlock_(sh); // {startCol, weekCol, notesCol, hdrRow}
    if (!block) continue;
    try {
      // E1:F1 -> A1:B1
      sh.getRange(1, colLetterToIndex_('E'), 1, 2)
        .copyTo(out.getRange(1, 1, 1, 2), {contentsOnly:false});
      // –¥–∞—Ç—ã (7 –¥–Ω–µ–π) -> C1:I1
      sh.getRange(block.hdrRow, block.startCol, 1, DAYS_IN_WEEK)
        .copyTo(out.getRange(1, 3, 1, DAYS_IN_WEEK), {contentsOnly:false});
      // WEEK -> J1
      sh.getRange(1, block.weekCol, 1, 1)
        .copyTo(out.getRange(1, 10, 1, 1), {contentsOnly:false});
      // NOTES -> K1
      sh.getRange(1, block.notesCol, 1, 1)
        .copyTo(out.getRange(1, 11, 1, 1), {contentsOnly:false});
      // —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–µ–ª—ã–π —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
      out.getRange(1, 1, 1, 11).setFontColor('white');
      headerSet = true;
      break;
    } catch (e) {}
  }
  if (!headerSet) {
    out.getRange('A1').setValue('No active week block found.');
    return;
  }

  // –∫–∞–Ω–¥–∏–¥–∞—Ç—ã
  const candidates = [];
  let orderSeq = 0;

  for (const name of TEAMS) {
    const sh = ss.getSheetByName(name);
    if (!sh) continue;
    const block = findActiveWeekBlock_(sh);
    if (!block) continue;

    const lastRow = sh.getLastRow();
    if (lastRow < DATA_START_ROW) continue;


    const numRows = lastRow - DATA_START_ROW + 1;
    const daysVals = sh.getRange(DATA_START_ROW, block.startCol, numRows, DAYS_IN_WEEK).getValues();
    const daysBgs  = sh.getRange(DATA_START_ROW, block.startCol, numRows, DAYS_IN_WEEK).getBackgrounds();

    for (let i = 0; i < numRows; i++) {
      const vals = daysVals[i];
      const bgs  = daysBgs[i];
      let hasAny = false, count = 0, maxRun = 0, run = 0;


      for (let d = 0; d < DAYS_IN_WEEK; d++) {
        const v  = String(vals[d] ?? '').trim().toLowerCase();
        const bg = String(bgs[d]  ?? '').toLowerCase();
        const isRedReady = (v === 'ready') && (REDS.has(bg) || isRedLoose_(bg));
        if (isRedReady) { hasAny = true; count++; run++; if (run > maxRun) maxRun = run; }
        else { run = 0; }
      }
      if (!hasAny) continue;

      const row = DATA_START_ROW + i;
      const score = (count >= 3 ? 2 : 0) + (maxRun >= 2 ? 1 : 0);


      candidates.push({sheet: sh, row, count, maxRun, score, order: orderSeq++, block});
    }
  }

  if (candidates.length === 0) {
    out.getRange('A2').setValue('No RED READY found in active week block.');
    autosize_(out, 11);
    return;
  }

  candidates.sort((a,b) => b.score - a.score || b.count - a.count || a.order - b.order);

  const uniqueCandidates = deduplicateCandidates_(candidates);

  // –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ –ª–∏—Å—Ç–∞–º –¥–ª—è –±–∞—Ç—á–µ–≤–æ–≥–æ —á—Ç–µ–Ω–∏—è
  const sheetCandidates = new Map();
  for (const c of uniqueCandidates) {
    const sheetId = c.sheet.getName();
    if (!sheetCandidates.has(sheetId)) {
      sheetCandidates.set(sheetId, {sheet: c.sheet, block: c.block, candidates: []});
    }
    sheetCandidates.get(sheetId).candidates.push(c);
  }

  const allVals = [];
  const allBgs = [];

  // –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ª–∏—Å—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
  for (const {sheet: sh, block: b, candidates: sheetCands} of sheetCandidates.values()) {
    if (sheetCands.length === 0) continue;

    // –≤—ã—á–∏—Å–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è –≤—Å–µ—Ö –Ω—É–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    const startCol = Math.min(colLetterToIndex_('E'), b.startCol);
    const endCol = Math.max(b.startCol + DAYS_IN_WEEK - 1, b.weekCol, b.notesCol);

    // —á–∏—Ç–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —ç—Ç–æ–≥–æ –ª–∏—Å—Ç–∞ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
    const rows = sheetCands.map(c => c.row);
    const minRow = Math.min(...rows);
    const maxRow = Math.max(...rows);

    const allSheetVals = sh.getRange(minRow, startCol, maxRow - minRow + 1, endCol - startCol + 1).getDisplayValues();
    const allSheetBgs = sh.getRange(minRow, startCol, maxRow - minRow + 1, endCol - startCol + 1).getBackgrounds();

    // –≤—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∫–æ–ª–æ–Ω–æ–∫ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ startCol
    const efStart = colLetterToIndex_('E') - startCol;
    const daysStart = b.startCol - startCol;
    const weekStart = b.weekCol - startCol;
    const notesStart = b.notesCol - startCol;

    // –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    for (const c of sheetCands) {
      const rowIndex = c.row - minRow;
      const fullVals = allSheetVals[rowIndex];
      const fullBgs = allSheetBgs[rowIndex];

      // —Å–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –≤—ã–≤–æ–¥–∞
      const rowVals = [
        fullVals[efStart], fullVals[efStart + 1], // E:F
        ...fullVals.slice(daysStart, daysStart + DAYS_IN_WEEK), // 7 –¥–Ω–µ–π
        fullVals[weekStart], // WEEK
        fullVals[notesStart] // NOTES
      ];

      const rowBgs = [
        fullBgs[efStart], fullBgs[efStart + 1], // E:F
        ...fullBgs.slice(daysStart, daysStart + DAYS_IN_WEEK), // 7 –¥–Ω–µ–π
        fullBgs[weekStart], // WEEK
        fullBgs[notesStart] // NOTES
      ];

      allVals.push(rowVals);
      allBgs.push(rowBgs);
    }
  }

  if (allVals.length > 0) {
    // –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    out.getRange(2, 1, allVals.length, 11).setValues(allVals);
    out.getRange(2, 1, allBgs.length, 11).setBackgrounds(allBgs);
  }

  // –¥–æ–±–∞–≤–ª—è–µ–º borders
  const usedRows = Math.max(1, out.getLastRow());
  const usedCols = 11;
  out.getRange(1, 1, usedRows, usedCols).setBorder(
    true, true, true, true, true, true,
    "black",
    SpreadsheetApp.BorderStyle.SOLID_MEDIUM
  );

  autosize_(out, 11);
}

/************** READY: LAST 2 DAYS ONLY **************/
function buildReadyLast2DaysOnly() {
  const ss = SpreadsheetApp.getActive();
  const tz = 'America/Chicago'; // CDT/CST –≤—Ä–µ–º—è
  const stamp = Utilities.formatDate(new Date(), tz, 'yyyy-MM-dd');
  const outName = `READY Last 2 Days ${stamp}`;

  let out = ss.getSheetByName(outName);
  if (!out) out = ss.insertSheet(outName);
  out.clear({contentsOnly:true});

  // –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ–≥–æ–¥–Ω—è –∏ –≤—á–µ—Ä–∞ –ø–æ –ß–∏–∫–∞–≥–æ –≤—Ä–µ–º–µ–Ω–∏
  const today = new Date();
  const todayChicago = new Date(today.toLocaleString("en-US", {timeZone: tz}));
  const yesterdayChicago = new Date(todayChicago.getTime() - 24 * 60 * 60 * 1000);

  const todayDay = todayChicago.getDate();
  const yesterdayDay = yesterdayChicago.getDate();

  // –∫–∞–Ω–¥–∏–¥–∞—Ç—ã —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–µ–º
  const candidates = [];
  let orderSeq = 0;
  let headerBlock = null;

  for (const name of TEAMS) {
    const sh = ss.getSheetByName(name);
    if (!sh) continue;
    const block = findActiveWeekBlock_(sh);
    if (!block) continue;
    if (!headerBlock) headerBlock = {sh, block}; // –∑–∞–ø–æ–º–Ω–∏–º –¥–ª—è —à–∞–ø–∫–∏

    // —á–∏—Ç–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–∞—Ç –¥–ª—è —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞
    const headerVals = sh.getRange(block.hdrRow, block.startCol, 1, DAYS_IN_WEEK).getDisplayValues()[0];

    // –∏—â–µ–º –ø–æ–∑–∏—Ü–∏–∏ "—Å–µ–≥–æ–¥–Ω—è" –∏ "–≤—á–µ—Ä–∞" –ø–æ –¥–∞—Ç–∞–º –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
    let todayIndex = -1, yesterdayIndex = -1;

    for (let d = 0; d < DAYS_IN_WEEK; d++) {
      const headerText = String(headerVals[d] ?? '').trim();
      // –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–µ–Ω—å –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö)
      const dayMatch = headerText.match(/\b(\d{1,2})\b/);
      if (dayMatch) {
        const headerDay = parseInt(dayMatch[1]);
        if (headerDay === todayDay) todayIndex = d;
        if (headerDay === yesterdayDay) yesterdayIndex = d;
      }
    }

    // –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –æ–±–∞ –¥–Ω—è –≤ —ç—Ç–æ–º –±–ª–æ–∫–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É
    if (todayIndex === -1 || yesterdayIndex === -1) continue;

    const lastRow = sh.getLastRow();
    if (lastRow < DATA_START_ROW) continue;

    const numRows = lastRow - DATA_START_ROW + 1;
    const daysVals = sh.getRange(DATA_START_ROW, block.startCol, numRows, DAYS_IN_WEEK).getValues();
    const daysBgs  = sh.getRange(DATA_START_ROW, block.startCol, numRows, DAYS_IN_WEEK).getBackgrounds();

    for (let i = 0; i < numRows; i++) {
      const vals = daysVals[i];
      const bgs  = daysBgs[i];

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º "—Å–µ–≥–æ–¥–Ω—è" –∏ "–≤—á–µ—Ä–∞" –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –ø–æ–∑–∏—Ü–∏—è–º
      const todayVal = String(vals[todayIndex] ?? '').trim().toLowerCase();
      const todayBg  = String(bgs[todayIndex]  ?? '').toLowerCase();
      const yesterdayVal = String(vals[yesterdayIndex] ?? '').trim().toLowerCase();
      const yesterdayBg  = String(bgs[yesterdayIndex]  ?? '').toLowerCase();

      const isTodayReady = (todayVal === 'ready') && (REDS.has(todayBg) || isRedLoose_(todayBg));
      const isYesterdayReady = (yesterdayVal === 'ready') && (REDS.has(yesterdayBg) || isRedLoose_(yesterdayBg));

      // –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –û–ë–ê –¥–Ω—è (—Å–µ–≥–æ–¥–Ω—è –ò –≤—á–µ—Ä–∞) RED READY
      if (!isTodayReady || !isYesterdayReady) continue;

      const row = DATA_START_ROW + i;

      candidates.push({
        sheet: sh, row, count: 2, maxRun: 2, score: 1, order: orderSeq++, block,
        todayIndex, yesterdayIndex // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
      });
    }
  }

  if (!headerBlock) {
    out.getRange('A1').setValue('No active week block found.');
    return;
  }

  // —à–∞–ø–∫–∞
  const hSh = headerBlock.sh;
  const hBlock = headerBlock.block;

  // –Ω–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏–∏ "—Å–µ–≥–æ–¥–Ω—è" –∏ "–≤—á–µ—Ä–∞" –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–ø–∫–∏
  const headerVals = hSh.getRange(hBlock.hdrRow, hBlock.startCol, 1, DAYS_IN_WEEK).getDisplayValues()[0];
  let todayIndex = -1, yesterdayIndex = -1;

  for (let d = 0; d < DAYS_IN_WEEK; d++) {
    const headerText = String(headerVals[d] ?? '').trim();
    const dayMatch = headerText.match(/\b(\d{1,2})\b/);
    if (dayMatch) {
      const headerDay = parseInt(dayMatch[1]);
      if (headerDay === todayDay) todayIndex = d;
      if (headerDay === yesterdayDay) yesterdayIndex = d;
    }
  }

  // –∫–æ–ø–∏—Ä—É–µ–º —à–∞–ø–∫—É —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
  try {
    // E1:F1 -> A1:B1
    hSh.getRange(1, colLetterToIndex_('E'), 1, 2)
      .copyTo(out.getRange(1, 1, 1, 2), {contentsOnly:false});

    if (yesterdayIndex !== -1 && todayIndex !== -1) {
      // –≤—á–µ—Ä–∞ -> C1, —Å–µ–≥–æ–¥–Ω—è -> D1 (–ø–æ—Ä—è–¥–æ–∫: –≤—á–µ—Ä–∞, —Å–µ–≥–æ–¥–Ω—è)
      hSh.getRange(hBlock.hdrRow, hBlock.startCol + yesterdayIndex, 1, 1)
        .copyTo(out.getRange(1, 3, 1, 1), {contentsOnly:false});
      hSh.getRange(hBlock.hdrRow, hBlock.startCol + todayIndex, 1, 1)
        .copyTo(out.getRange(1, 4, 1, 1), {contentsOnly:false});
    }

    // WEEK -> E1
    hSh.getRange(1, hBlock.weekCol, 1, 1)
      .copyTo(out.getRange(1, 5, 1, 1), {contentsOnly:false});
    // NOTES -> F1
    hSh.getRange(1, hBlock.notesCol, 1, 1)
      .copyTo(out.getRange(1, 6, 1, 1), {contentsOnly:false});
  } catch (e) {}

  // –¥–µ–ª–∞–µ–º –≤—Å—é —à–∞–ø–∫—É bold —Å –±–µ–ª—ã–º —Ç–µ–∫—Å—Ç–æ–º
  out.getRange(1, 1, 1, 6).setFontWeight('bold').setFontColor('white');

  if (candidates.length === 0) {
    out.getRange('A2').setValue('No drivers with RED READY in last 2 consecutive days found.');
    autosize_(out, 6);
    return;
  }

  candidates.sort((a,b) => b.score - a.score || b.count - a.count || a.order - b.order);

  // –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –ø–æ E:F (Dispatcher + Driver) - –±—ã—Å—Ç—Ä–∞—è –≤–µ—Ä—Å–∏—è
  const uniqueCandidates = deduplicateCandidates_(candidates);

  // –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ –ª–∏—Å—Ç–∞–º –¥–ª—è –±–∞—Ç—á–µ–≤–æ–≥–æ —á—Ç–µ–Ω–∏—è
  const sheetCandidates = new Map();
  for (const c of uniqueCandidates) {
    const sheetId = c.sheet.getName();
    if (!sheetCandidates.has(sheetId)) {
      sheetCandidates.set(sheetId, {sheet: c.sheet, block: c.block, candidates: []});
    }
    sheetCandidates.get(sheetId).candidates.push(c);
  }

  const allVals = [];
  const allBgs = [];

  // –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ª–∏—Å—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
  for (const {sheet: sh, block: b, candidates: sheetCands} of sheetCandidates.values()) {
    if (sheetCands.length === 0) continue;

    // –ø–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ (–≤—Å–µ –∏–∑ –æ–¥–Ω–æ–≥–æ –ª–∏—Å—Ç–∞ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏)
    const sampleCandidate = sheetCands[0];
    const yesterdayIdx = sampleCandidate.yesterdayIndex;
    const todayIdx = sampleCandidate.todayIndex;

    // –≤—ã—á–∏—Å–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è –≤—Å–µ—Ö –Ω—É–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    const startCol = Math.min(colLetterToIndex_('E'), b.startCol + yesterdayIdx, b.startCol + todayIdx);
    const endCol = Math.max(b.startCol + yesterdayIdx, b.startCol + todayIdx, b.weekCol, b.notesCol);

    // —á–∏—Ç–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —ç—Ç–æ–≥–æ –ª–∏—Å—Ç–∞ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
    const rows = sheetCands.map(c => c.row);
    const minRow = Math.min(...rows);
    const maxRow = Math.max(...rows);

    const allSheetVals = sh.getRange(minRow, startCol, maxRow - minRow + 1, endCol - startCol + 1).getDisplayValues();
    const allSheetBgs = sh.getRange(minRow, startCol, maxRow - minRow + 1, endCol - startCol + 1).getBackgrounds();

    // –ø–æ–∑–∏—Ü–∏–∏ –∫–æ–ª–æ–Ω–æ–∫
    const efStart = colLetterToIndex_('E') - startCol;
    const yesterdayStart = b.startCol + yesterdayIdx - startCol;
    const todayStart = b.startCol + todayIdx - startCol;
    const weekStart = b.weekCol - startCol;
    const notesStart = b.notesCol - startCol;

    // –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    for (const c of sheetCands) {
      const rowIndex = c.row - minRow;
      const fullVals = allSheetVals[rowIndex];
      const fullBgs = allSheetBgs[rowIndex];

      const rowVals = [
        fullVals[efStart], fullVals[efStart + 1], // E:F
        fullVals[yesterdayStart], fullVals[todayStart], // –≤—á–µ—Ä–∞, —Å–µ–≥–æ–¥–Ω—è
        fullVals[weekStart], // WEEK
        fullVals[notesStart] // NOTES
      ];

      const rowBgs = [
        fullBgs[efStart], fullBgs[efStart + 1], // E:F
        fullBgs[yesterdayStart], fullBgs[todayStart], // –≤—á–µ—Ä–∞, —Å–µ–≥–æ–¥–Ω—è
        fullBgs[weekStart], // WEEK
        fullBgs[notesStart] // NOTES
      ];

      allVals.push(rowVals);
      allBgs.push(rowBgs);
    }
  }

  if (allVals.length > 0) {
    // –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    out.getRange(2, 1, allVals.length, 6).setValues(allVals);
    out.getRange(2, 1, allBgs.length, 6).setBackgrounds(allBgs);
  }

  // –¥–æ–±–∞–≤–ª—è–µ–º borders
  const usedRows = Math.max(1, out.getLastRow());
  const usedCols = 6;
  out.getRange(1, 1, usedRows, usedCols).setBorder(
    true, true, true, true, true, true,
    "black",
    SpreadsheetApp.BorderStyle.SOLID_MEDIUM
  );

  // –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é autosize_ –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
  autosize_(out, 6);
}

/************** UNDERGROSS: MAIN (history H,I,J,K,U,AG ‚Üí days AK‚ÄìAQ ‚Üí AS) **************/
function buildUnderGrossReports() {
  const ss = SpreadsheetApp.getActive();
  const tz = ss.getSpreadsheetTimeZone();
  const stamp = Utilities.formatDate(new Date(), tz, 'yyyy-MM-dd');

  const teamSheets = ss.getSheets().filter(sh => TEAM_NAME_PATTERN.test(sh.getName()));
  if (teamSheets.length === 0) {
    SpreadsheetApp.getUi().alert('–ù–µ –Ω–∞—à—ë–ª –ª–∏—Å—Ç–æ–≤ "Team ‚Ä¶". –ü—Ä–æ–≤–µ—Ä—å –Ω–∞–∑–≤–∞–Ω–∏—è.');
    return;
  }

  for (const sh of teamSheets) {
    try {
      const lastRow = sh.getLastRow();
      const lastCol = sh.getLastColumn();
      if (lastRow < UG_DATA_START_ROW) continue;


      const block = findLastWeekBlock_(sh, lastRow, lastCol);
      if (!block) {
        makeOutSheet_(ss, sh.getName(), stamp)
          .getRange(('A2')).setValue('–ù–µ –Ω–∞–π–¥–µ–Ω –Ω–µ–ø—É—Å—Ç–æ–π –Ω–µ–¥–µ–ª—å–Ω—ã–π –±–ª–æ–∫ (AK..AS —Å —à–∞–≥–æ–º 12).');
        continue;
      }

      const {daysStartCol, weekGrossCol} = block; // AK..AS/BE/BP...
      const numRows = lastRow - UG_DATA_START_ROW + 1;


      // —Å—Ç—Ä–æ–∏–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –∏—Å—Ç–æ—Ä–∏—é: H,I,J,K,U,AG + –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –Ω–µ–¥–µ–ª–∏
      const rankStart = colLetterToIndex_('H');
      const agCol = colLetterToIndex_('AG');
      const rankEnd = Math.max(agCol, weekGrossCol);

      // –±–∞–∑–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è + –≤—Å–µ –Ω–µ–¥–µ–ª–∏ –¥–æ —Ç–µ–∫—É—â–µ–π
      const allRankCols = [...BASE_RANK_COLS];
      const firstWeekCol = colLetterToIndex_('AS'); // –ø–µ—Ä–≤–∞—è –Ω–µ–¥–µ–ª—è AS
      for (let weekCol = firstWeekCol; weekCol < weekGrossCol; weekCol += WEEK_BLOCK_WIDTH) {
        allRankCols.push(colIndexToLetter_(weekCol));
      }

      const rankOffsets = allRankCols.map(c => colLetterToIndex_(c) - rankStart);
      const currentWeekOff = weekGrossCol - rankStart; // —Ç–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è offset

      const valsEF    = sh.getRange(UG_DATA_START_ROW, colLetterToIndex_('E'),  numRows, 2).getDisplayValues();
      const bgsEF     = sh.getRange(UG_DATA_START_ROW, colLetterToIndex_('E'),  numRows, 2).getBackgrounds();
      const valsRank  = sh.getRange(UG_DATA_START_ROW, rankStart,               numRows, rankEnd - rankStart + 1).getDisplayValues();
      const bgsRank   = sh.getRange(UG_DATA_START_ROW, rankStart,               numRows, rankEnd - rankStart + 1).getBackgrounds();

      // –≤—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–µ–¥–µ–ª—å–Ω—ã–π –±–ª–æ–∫ AK..AS (–¥–Ω–∏ AK..AQ –æ—Ç–¥–µ–ª—å–Ω–æ)
      const valsWeekFull  = sh.getRange(UG_DATA_START_ROW, daysStartCol,        numRows, WEEK_DAYS_LEN + 1).getDisplayValues();
      const bgsWeekFull   = sh.getRange(UG_DATA_START_ROW, daysStartCol,        numRows, WEEK_DAYS_LEN + 1).getBackgrounds();

      // —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–µ
      const rows = [];


      for (let i = 0; i < numRows; i++) {
        const currentWeekVal = toNumber_(valsRank[i][currentWeekOff]);
        if (currentWeekVal === null || currentWeekVal >= UG_THRESHOLD) continue;

        let belowCnt = 0;
        // —Å—á–∏—Ç–∞–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é H,I,J,K,U,AG + –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –Ω–µ–¥–µ–ª–∏
        for (const off of rankOffsets) {
          const v = toNumber_(valsRank[i][off]);
          if (v !== null && v < UG_THRESHOLD) belowCnt++;
        }
        // –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
        if (currentWeekVal < UG_THRESHOLD) belowCnt++;

        rows.push({i, belowCnt, orig: i});

      }


      rows.sort((a,b) => (b.belowCnt - a.belowCnt) || (a.orig - b.orig));

      // –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è —Å—Ç—Ä–æ–∫ –ø–æ E:F - –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ valsEF
      const uniqueRows = deduplicateUGRowsFast_(rows, valsEF);


      const out = makeOutSheet_(ss, sh.getName(), stamp);
      out.clear({contentsOnly:true});

      // ---- –®–ê–ü–ö–ê ---- –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è
      const headerVals = [];
      const headerBgs = [];

      // E:F –∑–∞–≥–æ–ª–æ–≤–∫–∏
      const efHeader = sh.getRange(1, colLetterToIndex_('E'), 1, 2).getDisplayValues()[0];
      const efHeaderBgs = sh.getRange(1, colLetterToIndex_('E'), 1, 2).getBackgrounds()[0];
      headerVals.push(...efHeader);
      headerBgs.push(...efHeaderBgs);

      // –ò—Å—Ç–æ—Ä–∏—è –∫–æ–ª–æ–Ω–∫–∏
      for (const rankCol of allRankCols) {
        const colIndex = colLetterToIndex_(rankCol);
        const val = sh.getRange(1, colIndex, 1, 1).getDisplayValues()[0][0];
        const bg = sh.getRange(1, colIndex, 1, 1).getBackgrounds()[0][0];
        headerVals.push(val);
        headerBgs.push(bg);
      }

      // –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
      const daysHeader = sh.getRange(1, daysStartCol, 1, WEEK_DAYS_LEN).getDisplayValues()[0];
      const daysHeaderBgs = sh.getRange(1, daysStartCol, 1, WEEK_DAYS_LEN).getBackgrounds()[0];
      headerVals.push(...daysHeader);
      headerBgs.push(...daysHeaderBgs);

      // –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è
      const weekHeader = sh.getRange(1, weekGrossCol, 1, 1).getDisplayValues()[0][0];
      const weekHeaderBg = sh.getRange(1, weekGrossCol, 1, 1).getBackgrounds()[0][0];
      headerVals.push(weekHeader);
      headerBgs.push(weekHeaderBg);

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
      const totalHeaderCols = 2 + allRankCols.length + WEEK_DAYS_LEN + 1;
      out.getRange(1, 1, 1, totalHeaderCols).setValues([headerVals]);
      out.getRange(1, 1, 1, totalHeaderCols).setBackgrounds([headerBgs]);
      out.getRange(1, 1, 1, totalHeaderCols).setFontWeight('bold').setFontColor('white');

      // ---- –î–ê–ù–ù–´–ï ----
      if (uniqueRows.length === 0) {
        out.getRange('A2').setValue('–ù–µ—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–π —Å –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–º < 7000 –≤ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–µ.');
      } else {
        const outVals = [];
        const outBgs  = [];
        const histOffsets = allRankCols.map(c => colLetterToIndex_(c) - rankStart);
        for (const r of uniqueRows) {
          const i = r.i;
          const histVals = histOffsets.map(off => valsRank[i][off]);
          const histBgs  = histOffsets.map(off => bgsRank[i][off]);
          const weekVals = valsWeekFull[i].slice(0, WEEK_DAYS_LEN);
          const weekBgs  = bgsWeekFull[i].slice(0, WEEK_DAYS_LEN);
          const currentWeekVal = valsRank[i][currentWeekOff];
          const currentWeekBg  = bgsRank[i][currentWeekOff];
          outVals.push([...valsEF[i], ...histVals, ...weekVals, currentWeekVal]);
          outBgs.push([...bgsEF[i],  ...histBgs,  ...weekBgs,  currentWeekBg]);
        }
        const R = outVals.length, C = outVals[0].length;
        out.getRange(2,1,R,C).setValues(outVals);
        out.getRange(2,1,R,C).setBackgrounds(outBgs);
      }

      const totalCols = 2 + allRankCols.length + WEEK_DAYS_LEN + 1;
      for (let c = 1; c <= totalCols; c++) out.autoResizeColumn(c);

      out.getRange('A2').setNote(`Selected days: ${colIndexToLetter_(daysStartCol)}..${colIndexToLetter_(daysStartCol + WEEK_DAYS_LEN - 1)}`);

      // ===== BORDERS (black, medium) =====
      const usedRows = Math.max(1, out.getLastRow());
      const usedCols = Math.max(1, out.getLastColumn());
      out.getRange(1, 1, usedRows, usedCols).setBorder(
        true, true, true, true, true, true,
        "black",
        SpreadsheetApp.BorderStyle.SOLID_MEDIUM
      );

    } catch (err) {
      const out = makeOutSheet_(ss, sh.getName(), stamp);
      out.getRange('A2').setValue('–û—à–∏–±–∫–∞: ' + (err && err.message ? err.message : err));
    }
  }
}

/************** RED BUTTON: delete all sheets except Team 1..5 and READY* **************/
function redButtonCleanup() {
  const ss = SpreadsheetApp.getActive();
  const ui = SpreadsheetApp.getUi();
  const resp = ui.alert(
    'RED BUTTON',
    '–£–¥–∞–ª–∏—Ç—å –í–°–ï –ª–∏—Å—Ç—ã, –∫—Ä–æ–º–µ Team 1..5 –∏ –ª–∏—Å—Ç–æ–≤, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è –Ω–∞ "READY"? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.',
    ui.ButtonSet.YES_NO
  );
  if (resp !== ui.Button.YES) return;

  const keepTeam = new Set(['Team 1','Team 2','Team 3','Team 4','Team 5']);
  const sheets = ss.getSheets();

  // –°–æ–±–µ—Ä—ë–º —Å–ø–∏—Å–æ–∫ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
  const toDelete = [];
  for (const sh of sheets) {
    const name = sh.getName();
    const isTeamKeep = keepTeam.has(name);
    const isReadyKeep = /^READY\b/i.test(name); // READY –∏–ª–∏ READY 2025-...
    if (!isTeamKeep && !isReadyKeep) {
      toDelete.push(sh);
    }
  }

  // –£–¥–∞–ª—è–µ–º, –∏–∑–±–µ–≥–∞—è —Å–∏—Ç—É–∞—Ü–∏–∏ "–ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–∏—Å—Ç"
  for (const sh of toDelete) {
    if (ss.getSheets().length <= 1) break; // safety
    ss.deleteSheet(sh);
  }

  ui.alert(`–ì–æ—Ç–æ–≤–æ. –£–¥–∞–ª–µ–Ω–æ –ª–∏—Å—Ç–æ–≤: ${toDelete.length}. –û—Å—Ç–∞–≤–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ Team 1..5 –∏ READY*.`);
}

/* ===== helpers ===== */
function findActiveWeekBlock_(sh) {
  const maxCol = sh.getMaxColumns();
  let start = colLetterToIndex_(FIRST_BLOCK_START);
  let found = null;
  while (start + 10 <= maxCol) {
    const hdrRow = detectDateHeaderRowInBlock_(sh, start);
    if (hdrRow) {
      found = { startCol: start, weekCol: start + 8, notesCol: start + 10, hdrRow };
    }
    start += BLOCK_STEP;
  }
  return found;
}

function findLastWeekBlock_(sh, lastRow, lastCol) {
  const firstDays = colLetterToIndex_('AK');
  let best = null;
  for (let start = firstDays; start <= lastCol; start += WEEK_BLOCK_WIDTH) {
    const weekGrossCol = start + WEEK_GROSS_OFFSET;
    if (weekGrossCol > lastCol) break;
    const colVals = sh.getRange(UG_DATA_START_ROW, weekGrossCol, lastRow - UG_DATA_START_ROW + 1, 1)
      .getDisplayValues().map(r => r[0]).filter(v => v && String(v).trim() !== '');
    if (colVals.length > 0) best = {daysStartCol: start, weekGrossCol, width: WEEK_DAYS_LEN + 1};
  }
  return best;
}

function detectDateHeaderRowInBlock_(sh, startCol) {
  const candidates = [1,2,3];
  for (const r of candidates) {
    const vals = sh.getRange(r, startCol, 1, DAYS_IN_WEEK).getDisplayValues()[0];
    const ok = vals.every(v => {
      const s = String(v || '').trim().toLowerCase();
      if (!s) return false;
      if (s === 'ready' || s === 'enroute' || s === 'break') return false;
      return /[-/]/.test(s) || /(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i.test(s);
    });
    if (ok) return r;
  }
  return null;
}

function safeCopy_(srcSheet, srcRow, srcCol, numRows, numCols, dstSheet, dstRow, dstCol) {
  try {
    srcSheet.getRange(srcRow, srcCol, numRows, numCols)
            .copyTo(dstSheet.getRange(dstRow, dstCol, numRows, numCols), {contentsOnly:false});
  } catch (_) {}
}

function isRedLoose_(hex) {
  if (!/^#[0-9a-fA-F]{6}$/.test(hex)) return false;
  const r = parseInt(hex.slice(1,3),16),
        g = parseInt(hex.slice(3,5),16),
        b = parseInt(hex.slice(5,7),16);
  return r >= 200 && g <= 90 && b <= 90;
}

function colLetterToIndex_(letter) {
  let n = 0;
  for (let i=0;i<letter.length;i++) n = n*26 + (letter.charCodeAt(i)-64);
  return n;
}

function colIndexToLetter_(index) {
  let result = '';
  while (index > 0) {
    index--;
    result = String.fromCharCode(65 + (index % 26)) + result;
    index = Math.floor(index / 26);
  }
  return result;
}

function autosize_(sheet, nCols) {
  for (let c = 1; c <= nCols; c++) sheet.autoResizeColumn(c);
}

function toNumber_(v) {
  if (typeof v === 'number') return v;
  if (v === null || v === undefined) return null;
  const s = String(v).replace(/[^0-9.\-]/g,'').trim();
  if (!s) return null;
  const num = parseFloat(s);
  return Number.isFinite(num) ? num : null;
}

function makeOutSheet_(ss, teamName, stamp) {
  const name = `UG ${teamName} ${stamp}`;
  let sh = ss.getSheetByName(name);
  if (!sh) sh = ss.insertSheet(name);
  return sh;
}


function deduplicateCandidatesFast_(candidates) {
  if (candidates.length === 0) return [];

  const seen = new Set();
  const unique = [];

  // –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ –ª–∏—Å—Ç–∞–º –¥–ª—è –±–∞—Ç—á–µ–≤–æ–≥–æ —á—Ç–µ–Ω–∏—è
  const sheetGroups = new Map();
  for (const candidate of candidates) {
    const sheetName = candidate.sheet.getName();
    if (!sheetGroups.has(sheetName)) {
      sheetGroups.set(sheetName, []);
    }
    sheetGroups.get(sheetName).push(candidate);
  }

  // –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ª–∏—Å—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
  for (const [sheetName, groupCandidates] of sheetGroups) {
    const sh = groupCandidates[0].sheet;

    // –Ω–∞—Ö–æ–¥–∏–º –¥–∏–∞–ø–∞–∑–æ–Ω —Å—Ç—Ä–æ–∫ –¥–ª—è —á—Ç–µ–Ω–∏—è E:F
    const rows = groupCandidates.map(c => c.row);
    const minRow = Math.min(...rows);
    const maxRow = Math.max(...rows);
    const numRows = maxRow - minRow + 1;

    try {
      // —á–∏—Ç–∞–µ–º –≤–µ—Å—å –¥–∏–∞–ø–∞–∑–æ–Ω E:F –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
      const efData = sh.getRange(minRow, colLetterToIndex_('E'), numRows, 2).getDisplayValues();

      for (const candidate of groupCandidates) {
        const rowIndex = candidate.row - minRow;
        const efVals = efData[rowIndex];
        // –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–ª—é—á —Ç–æ–ª—å–∫–æ –ø–æ dispatcher + driver
        const key = `${efVals[0]}|${efVals[1]}`.toLowerCase().trim();


        if (!seen.has(key)) {
          seen.add(key);
          unique.push(candidate);

        }
      }
    } catch (e) {
      // –ø—Ä–∏ –æ—à–∏–±–∫–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –∏–∑ –≥—Ä—É–ø–ø—ã
      unique.push(...groupCandidates);
    }
  }

  return unique;
}


function deduplicateCandidates_(candidates) {
  if (candidates.length === 0) return [];

  const seen = new Set();
  const unique = [];
  const sheetGroups = new Map();

  for (const candidate of candidates) {
    const sheetName = candidate.sheet.getName();
    if (!sheetGroups.has(sheetName)) {
      sheetGroups.set(sheetName, []);
    }
    sheetGroups.get(sheetName).push(candidate);
  }

  for (const [sheetName, groupCandidates] of sheetGroups) {
    const sh = groupCandidates[0].sheet;
    const rows = groupCandidates.map(c => c.row);
    const minRow = Math.min(...rows);
    const maxRow = Math.max(...rows);
    const numRows = maxRow - minRow + 1;

    try {
      const efData = sh.getRange(minRow, colLetterToIndex_('E'), numRows, 2).getDisplayValues();

      for (const candidate of groupCandidates) {
        const rowIndex = candidate.row - minRow;
        const efVals = efData[rowIndex];
        const key = `${efVals[0]}|${efVals[1]}`.toLowerCase().trim();

        if (!seen.has(key)) {
          seen.add(key);
          unique.push(candidate);
        }
      }
    } catch (e) {
      unique.push(...groupCandidates);
    }
  }

  return unique;
}

function deduplicateUGRowsFast_(rows, valsEF) {
  const seen = new Set();
  const unique = [];

  for (const rowData of rows) {
    try {
      const efVals = valsEF[rowData.i];
      const key = `${efVals[0]}|${efVals[1]}`.toLowerCase().trim();

      if (!seen.has(key)) {
        seen.add(key);
        unique.push(rowData);
      }
    } catch (e) {
      unique.push(rowData);
    }
  }

  return unique;
}


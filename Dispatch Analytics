/* ===== Dispatch System ‚Äî FULL SCRIPT (READY + UNDERGROSS) ===== */
/* eslint-disable no-unused-vars */

/************** READY CONFIG **************/
const TEAMS = ['Team 1','Team 2','Team 3','Team 4','Team 5'];
const DATA_START_ROW = 2; // –¥–∞–Ω–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏

// –æ—Ç—Ç–µ–Ω–∫–∏ ¬´–∫—Ä–∞—Å–Ω—ã–π ready¬ª
const REDS = new Set([
  '#ff0000','#ff5b5b','#ff6666','#f44336','#ea4335','#d32f2f','#e06666','#ea9999'
]);

// –Ω–µ–¥–µ–ª—å–Ω—ã–µ –±–ª–æ–∫–∏: AK..AR ‚Äî 7 –¥–Ω–µ–π; AS ‚Äî WEEK; AU ‚Äî NOTES; —à–∞–≥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–ª–æ–∫–∞ = 12
const FIRST_BLOCK_START = 'AK';
const BLOCK_STEP = 12;   // AK..AS, AW..BE, BI..BQ, ...
const DAYS_IN_WEEK = 7;  // AK..AR (7 –¥–Ω–µ–π)

/************** UNDERGROSS CONFIG **************/
const UG_DATA_START_ROW = 2;
const BASE_RANK_COLS = ['H','I','J','K','U','AG']; // –±–∞–∑–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è
const WEEK_BLOCK_WIDTH = 12;                        // —à–∞–≥ –±–ª–æ–∫–æ–≤
const WEEK_DAYS_LEN = 7;                            // AK..AR
const WEEK_GROSS_OFFSET = 8;                        // WEEK = start + 8 (AS = AK+8)
const UG_THRESHOLD = 7000;                          // —Ñ–∏–ª—å—Ç—Ä < 7000 –ø–æ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–µ
const TEAM_NAME_PATTERN = /^Team\s+\d+/i;           // Team 1..5

/************** MENU **************/
function onOpen() {
  SpreadsheetApp.getUi()
    .createMenu('Dispatch')
    .addItem('READY (FAST, dynamic week block)', 'buildReadyDynamicFast')
    .addItem('READY Last 2 Days Only', 'buildReadyLast2DaysOnly')
    .addItem('üéØ READY Custom Date Range', 'buildReadyCustomDateRange')
    .addSeparator()
    .addItem('Underperformed (auto last week)', 'buildUnderGrossReports')
    .addItem('üéØ Select WEEK Report (choose week)', 'buildSelectWeekReport')
    .addSeparator()
    .addItem('üß® RED BUTTON: Clean extra reports', 'redButtonCleanup')
    .addToUi();
}

/************** READY: MAIN **************/
function buildReadyDynamicFast() {
  const ss = SpreadsheetApp.getActive();
  const tz = ss.getSpreadsheetTimeZone();
  const stamp = Utilities.formatDate(new Date(), tz, 'yyyy-MM-dd');
  const outName = `READY ${stamp}`;

  let out = ss.getSheetByName(outName);
  if (!out) out = ss.insertSheet(outName);
  out.clear({contentsOnly:true});

  // —à–∞–ø–∫–∞ ‚Äî —Å –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Å—Ç–∞, –≥–¥–µ –Ω–∞–π–¥—ë—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–π –±–ª–æ–∫
  let headerSet = false;
  for (const t of TEAMS) {
    const sh = ss.getSheetByName(t);
    if (!sh) continue;
    const block = findActiveWeekBlock_(sh); // {startCol, weekCol, notesCol, hdrRow}
    if (!block) continue;
    try {
      // E1:F1 -> A1:B1
      sh.getRange(1, colLetterToIndex_('E'), 1, 2)
        .copyTo(out.getRange(1, 1, 1, 2), {contentsOnly:false});
      // –¥–∞—Ç—ã (7 –¥–Ω–µ–π) -> C1:I1
      sh.getRange(block.hdrRow, block.startCol, 1, DAYS_IN_WEEK)
        .copyTo(out.getRange(1, 3, 1, DAYS_IN_WEEK), {contentsOnly:false});
      // WEEK -> J1
      sh.getRange(1, block.weekCol, 1, 1)
        .copyTo(out.getRange(1, 10, 1, 1), {contentsOnly:false});
      // NOTES -> K1
      sh.getRange(1, block.notesCol, 1, 1)
        .copyTo(out.getRange(1, 11, 1, 1), {contentsOnly:false});
      // —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–µ–ª—ã–π —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
      out.getRange(1, 1, 1, 11).setFontColor('white');
      headerSet = true;
      break;
    } catch (e) {}
  }
  if (!headerSet) {
    out.getRange('A1').setValue('No active week block found.');
    return;
  }

  // –∫–∞–Ω–¥–∏–¥–∞—Ç—ã
  const candidates = [];
  let orderSeq = 0;

  for (const name of TEAMS) {
    const sh = ss.getSheetByName(name);
    if (!sh) continue;
    const block = findActiveWeekBlock_(sh);
    if (!block) continue;

    const lastRow = sh.getLastRow();
    if (lastRow < DATA_START_ROW) continue;


    const numRows = lastRow - DATA_START_ROW + 1;
    const daysVals = sh.getRange(DATA_START_ROW, block.startCol, numRows, DAYS_IN_WEEK).getValues();
    const daysBgs  = sh.getRange(DATA_START_ROW, block.startCol, numRows, DAYS_IN_WEEK).getBackgrounds();

    for (let i = 0; i < numRows; i++) {
      const vals = daysVals[i];
      const bgs  = daysBgs[i];
      let hasAny = false, count = 0, maxRun = 0, run = 0;


      for (let d = 0; d < DAYS_IN_WEEK; d++) {
        const v  = String(vals[d] ?? '').trim().toLowerCase();
        const bg = String(bgs[d]  ?? '').toLowerCase();
        const isRedReady = (v === 'ready') && (REDS.has(bg) || isRedLoose_(bg));
        if (isRedReady) { hasAny = true; count++; run++; if (run > maxRun) maxRun = run; }
        else { run = 0; }
      }
      if (!hasAny) continue;

      const row = DATA_START_ROW + i;
      const score = (count >= 3 ? 2 : 0) + (maxRun >= 2 ? 1 : 0);


      candidates.push({sheet: sh, row, count, maxRun, score, order: orderSeq++, block});
    }
  }

  if (candidates.length === 0) {
    out.getRange('A2').setValue('No RED READY found in active week block.');
    autosize_(out, 11);
    return;
  }

  candidates.sort((a,b) => b.score - a.score || b.count - a.count || a.order - b.order);

  const uniqueCandidates = deduplicateCandidates_(candidates);

  // –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ –ª–∏—Å—Ç–∞–º –¥–ª—è –±–∞—Ç—á–µ–≤–æ–≥–æ —á—Ç–µ–Ω–∏—è
  const sheetCandidates = new Map();
  for (const c of uniqueCandidates) {
    const sheetId = c.sheet.getName();
    if (!sheetCandidates.has(sheetId)) {
      sheetCandidates.set(sheetId, {sheet: c.sheet, block: c.block, candidates: []});
    }
    sheetCandidates.get(sheetId).candidates.push(c);
  }

  const allVals = [];
  const allBgs = [];

  // –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ª–∏—Å—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
  for (const {sheet: sh, block: b, candidates: sheetCands} of sheetCandidates.values()) {
    if (sheetCands.length === 0) continue;

    // –≤—ã—á–∏—Å–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è –≤—Å–µ—Ö –Ω—É–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    const startCol = Math.min(colLetterToIndex_('E'), b.startCol);
    const endCol = Math.max(b.startCol + DAYS_IN_WEEK - 1, b.weekCol, b.notesCol);

    // —á–∏—Ç–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —ç—Ç–æ–≥–æ –ª–∏—Å—Ç–∞ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
    const rows = sheetCands.map(c => c.row);
    const minRow = Math.min(...rows);
    const maxRow = Math.max(...rows);

    const allSheetVals = sh.getRange(minRow, startCol, maxRow - minRow + 1, endCol - startCol + 1).getDisplayValues();
    const allSheetBgs = sh.getRange(minRow, startCol, maxRow - minRow + 1, endCol - startCol + 1).getBackgrounds();

    // –≤—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∫–æ–ª–æ–Ω–æ–∫ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ startCol
    const efStart = colLetterToIndex_('E') - startCol;
    const daysStart = b.startCol - startCol;
    const weekStart = b.weekCol - startCol;
    const notesStart = b.notesCol - startCol;

    // –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    for (const c of sheetCands) {
      const rowIndex = c.row - minRow;
      const fullVals = allSheetVals[rowIndex];
      const fullBgs = allSheetBgs[rowIndex];

      // —Å–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –≤—ã–≤–æ–¥–∞
      const rowVals = [
        fullVals[efStart], fullVals[efStart + 1], // E:F
        ...fullVals.slice(daysStart, daysStart + DAYS_IN_WEEK), // 7 –¥–Ω–µ–π
        fullVals[weekStart], // WEEK
        fullVals[notesStart] // NOTES
      ];

      const rowBgs = [
        fullBgs[efStart], fullBgs[efStart + 1], // E:F
        ...fullBgs.slice(daysStart, daysStart + DAYS_IN_WEEK), // 7 –¥–Ω–µ–π
        fullBgs[weekStart], // WEEK
        fullBgs[notesStart] // NOTES
      ];

      allVals.push(rowVals);
      allBgs.push(rowBgs);
    }
  }

  if (allVals.length > 0) {
    // –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    out.getRange(2, 1, allVals.length, 11).setValues(allVals);
    out.getRange(2, 1, allBgs.length, 11).setBackgrounds(allBgs);
  }

  // –¥–æ–±–∞–≤–ª—è–µ–º borders
  const usedRows = Math.max(1, out.getLastRow());
  const usedCols = 11;
  out.getRange(1, 1, usedRows, usedCols).setBorder(
    true, true, true, true, true, true,
    "black",
    SpreadsheetApp.BorderStyle.SOLID_MEDIUM
  );

  autosize_(out, 11);
}

/************** READY: LAST 2 DAYS ONLY **************/
function buildReadyLast2DaysOnly() {
  const ss = SpreadsheetApp.getActive();
  const tz = 'America/Chicago'; // CDT/CST –≤—Ä–µ–º—è
  const stamp = Utilities.formatDate(new Date(), tz, 'yyyy-MM-dd');
  const outName = `READY Last 2 Days ${stamp}`;

  let out = ss.getSheetByName(outName);
  if (!out) out = ss.insertSheet(outName);
  out.clear({contentsOnly:true});

  // –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ–≥–æ–¥–Ω—è –∏ –≤—á–µ—Ä–∞ –ø–æ –ß–∏–∫–∞–≥–æ –≤—Ä–µ–º–µ–Ω–∏
  const today = new Date();
  const todayChicago = new Date(today.toLocaleString("en-US", {timeZone: tz}));
  const yesterdayChicago = new Date(todayChicago.getTime() - 24 * 60 * 60 * 1000);

  const todayDay = todayChicago.getDate();
  const yesterdayDay = yesterdayChicago.getDate();

  // –∫–∞–Ω–¥–∏–¥–∞—Ç—ã —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–µ–º
  const candidates = [];
  let orderSeq = 0;
  let headerBlock = null;

  for (const name of TEAMS) {
    const sh = ss.getSheetByName(name);
    if (!sh) continue;
    const block = findActiveWeekBlock_(sh);
    if (!block) continue;
    if (!headerBlock) headerBlock = {sh, block}; // –∑–∞–ø–æ–º–Ω–∏–º –¥–ª—è —à–∞–ø–∫–∏

    // —á–∏—Ç–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–∞—Ç –¥–ª—è —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞
    const headerVals = sh.getRange(block.hdrRow, block.startCol, 1, DAYS_IN_WEEK).getDisplayValues()[0];

    // –∏—â–µ–º –ø–æ–∑–∏—Ü–∏–∏ "—Å–µ–≥–æ–¥–Ω—è" –∏ "–≤—á–µ—Ä–∞" –ø–æ –¥–∞—Ç–∞–º –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
    let todayIndex = -1, yesterdayIndex = -1;

    for (let d = 0; d < DAYS_IN_WEEK; d++) {
      const headerText = String(headerVals[d] ?? '').trim();
      // –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–µ–Ω—å –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö)
      const dayMatch = headerText.match(/\b(\d{1,2})\b/);
      if (dayMatch) {
        const headerDay = parseInt(dayMatch[1]);
        if (headerDay === todayDay) todayIndex = d;
        if (headerDay === yesterdayDay) yesterdayIndex = d;
      }
    }

    // –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –æ–±–∞ –¥–Ω—è –≤ —ç—Ç–æ–º –±–ª–æ–∫–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É
    if (todayIndex === -1 || yesterdayIndex === -1) continue;

    const lastRow = sh.getLastRow();
    if (lastRow < DATA_START_ROW) continue;

    const numRows = lastRow - DATA_START_ROW + 1;
    const daysVals = sh.getRange(DATA_START_ROW, block.startCol, numRows, DAYS_IN_WEEK).getValues();
    const daysBgs  = sh.getRange(DATA_START_ROW, block.startCol, numRows, DAYS_IN_WEEK).getBackgrounds();

    for (let i = 0; i < numRows; i++) {
      const vals = daysVals[i];
      const bgs  = daysBgs[i];

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º "—Å–µ–≥–æ–¥–Ω—è" –∏ "–≤—á–µ—Ä–∞" –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –ø–æ–∑–∏—Ü–∏—è–º
      const todayVal = String(vals[todayIndex] ?? '').trim().toLowerCase();
      const todayBg  = String(bgs[todayIndex]  ?? '').toLowerCase();
      const yesterdayVal = String(vals[yesterdayIndex] ?? '').trim().toLowerCase();
      const yesterdayBg  = String(bgs[yesterdayIndex]  ?? '').toLowerCase();

      const isTodayReady = (todayVal === 'ready') && (REDS.has(todayBg) || isRedLoose_(todayBg));
      const isYesterdayReady = (yesterdayVal === 'ready') && (REDS.has(yesterdayBg) || isRedLoose_(yesterdayBg));

      // –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –û–ë–ê –¥–Ω—è (—Å–µ–≥–æ–¥–Ω—è –ò –≤—á–µ—Ä–∞) RED READY
      if (!isTodayReady || !isYesterdayReady) continue;

      const row = DATA_START_ROW + i;

      candidates.push({
        sheet: sh, row, count: 2, maxRun: 2, score: 1, order: orderSeq++, block,
        todayIndex, yesterdayIndex // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
      });
    }
  }

  if (!headerBlock) {
    out.getRange('A1').setValue('No active week block found.');
    return;
  }

  // —à–∞–ø–∫–∞
  const hSh = headerBlock.sh;
  const hBlock = headerBlock.block;

  // –Ω–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏–∏ "—Å–µ–≥–æ–¥–Ω—è" –∏ "–≤—á–µ—Ä–∞" –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–ø–∫–∏
  const headerVals = hSh.getRange(hBlock.hdrRow, hBlock.startCol, 1, DAYS_IN_WEEK).getDisplayValues()[0];
  let todayIndex = -1, yesterdayIndex = -1;

  for (let d = 0; d < DAYS_IN_WEEK; d++) {
    const headerText = String(headerVals[d] ?? '').trim();
    const dayMatch = headerText.match(/\b(\d{1,2})\b/);
    if (dayMatch) {
      const headerDay = parseInt(dayMatch[1]);
      if (headerDay === todayDay) todayIndex = d;
      if (headerDay === yesterdayDay) yesterdayIndex = d;
    }
  }

  // –∫–æ–ø–∏—Ä—É–µ–º —à–∞–ø–∫—É —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
  try {
    // E1:F1 -> A1:B1
    hSh.getRange(1, colLetterToIndex_('E'), 1, 2)
      .copyTo(out.getRange(1, 1, 1, 2), {contentsOnly:false});

    if (yesterdayIndex !== -1 && todayIndex !== -1) {
      // –≤—á–µ—Ä–∞ -> C1, —Å–µ–≥–æ–¥–Ω—è -> D1 (–ø–æ—Ä—è–¥–æ–∫: –≤—á–µ—Ä–∞, —Å–µ–≥–æ–¥–Ω—è)
      hSh.getRange(hBlock.hdrRow, hBlock.startCol + yesterdayIndex, 1, 1)
        .copyTo(out.getRange(1, 3, 1, 1), {contentsOnly:false});
      hSh.getRange(hBlock.hdrRow, hBlock.startCol + todayIndex, 1, 1)
        .copyTo(out.getRange(1, 4, 1, 1), {contentsOnly:false});
    }

    // WEEK -> E1
    hSh.getRange(1, hBlock.weekCol, 1, 1)
      .copyTo(out.getRange(1, 5, 1, 1), {contentsOnly:false});
    // NOTES -> F1
    hSh.getRange(1, hBlock.notesCol, 1, 1)
      .copyTo(out.getRange(1, 6, 1, 1), {contentsOnly:false});
  } catch (e) {}

  // –¥–µ–ª–∞–µ–º –≤—Å—é —à–∞–ø–∫—É bold —Å –±–µ–ª—ã–º —Ç–µ–∫—Å—Ç–æ–º
  out.getRange(1, 1, 1, 6).setFontWeight('bold').setFontColor('white');

  if (candidates.length === 0) {
    out.getRange('A2').setValue('No drivers with RED READY in last 2 consecutive days found.');
    autosize_(out, 6);
    return;
  }

  candidates.sort((a,b) => b.score - a.score || b.count - a.count || a.order - b.order);

  // –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –ø–æ E:F (Dispatcher + Driver) - –±—ã—Å—Ç—Ä–∞—è –≤–µ—Ä—Å–∏—è
  const uniqueCandidates = deduplicateCandidates_(candidates);

  // –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ –ª–∏—Å—Ç–∞–º –¥–ª—è –±–∞—Ç—á–µ–≤–æ–≥–æ —á—Ç–µ–Ω–∏—è
  const sheetCandidates = new Map();
  for (const c of uniqueCandidates) {
    const sheetId = c.sheet.getName();
    if (!sheetCandidates.has(sheetId)) {
      sheetCandidates.set(sheetId, {sheet: c.sheet, block: c.block, candidates: []});
    }
    sheetCandidates.get(sheetId).candidates.push(c);
  }

  const allVals = [];
  const allBgs = [];

  // –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ª–∏—Å—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
  for (const {sheet: sh, block: b, candidates: sheetCands} of sheetCandidates.values()) {
    if (sheetCands.length === 0) continue;

    // –ø–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ (–≤—Å–µ –∏–∑ –æ–¥–Ω–æ–≥–æ –ª–∏—Å—Ç–∞ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏)
    const sampleCandidate = sheetCands[0];
    const yesterdayIdx = sampleCandidate.yesterdayIndex;
    const todayIdx = sampleCandidate.todayIndex;

    // –≤—ã—á–∏—Å–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è –≤—Å–µ—Ö –Ω—É–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    const startCol = Math.min(colLetterToIndex_('E'), b.startCol + yesterdayIdx, b.startCol + todayIdx);
    const endCol = Math.max(b.startCol + yesterdayIdx, b.startCol + todayIdx, b.weekCol, b.notesCol);

    // —á–∏—Ç–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —ç—Ç–æ–≥–æ –ª–∏—Å—Ç–∞ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
    const rows = sheetCands.map(c => c.row);
    const minRow = Math.min(...rows);
    const maxRow = Math.max(...rows);

    const allSheetVals = sh.getRange(minRow, startCol, maxRow - minRow + 1, endCol - startCol + 1).getDisplayValues();
    const allSheetBgs = sh.getRange(minRow, startCol, maxRow - minRow + 1, endCol - startCol + 1).getBackgrounds();

    // –ø–æ–∑–∏—Ü–∏–∏ –∫–æ–ª–æ–Ω–æ–∫
    const efStart = colLetterToIndex_('E') - startCol;
    const yesterdayStart = b.startCol + yesterdayIdx - startCol;
    const todayStart = b.startCol + todayIdx - startCol;
    const weekStart = b.weekCol - startCol;
    const notesStart = b.notesCol - startCol;

    // –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    for (const c of sheetCands) {
      const rowIndex = c.row - minRow;
      const fullVals = allSheetVals[rowIndex];
      const fullBgs = allSheetBgs[rowIndex];

      const rowVals = [
        fullVals[efStart], fullVals[efStart + 1], // E:F
        fullVals[yesterdayStart], fullVals[todayStart], // –≤—á–µ—Ä–∞, —Å–µ–≥–æ–¥–Ω—è
        fullVals[weekStart], // WEEK
        fullVals[notesStart] // NOTES
      ];

      const rowBgs = [
        fullBgs[efStart], fullBgs[efStart + 1], // E:F
        fullBgs[yesterdayStart], fullBgs[todayStart], // –≤—á–µ—Ä–∞, —Å–µ–≥–æ–¥–Ω—è
        fullBgs[weekStart], // WEEK
        fullBgs[notesStart] // NOTES
      ];

      allVals.push(rowVals);
      allBgs.push(rowBgs);
    }
  }

  if (allVals.length > 0) {
    // –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    out.getRange(2, 1, allVals.length, 6).setValues(allVals);
    out.getRange(2, 1, allBgs.length, 6).setBackgrounds(allBgs);
  }

  // –¥–æ–±–∞–≤–ª—è–µ–º borders
  const usedRows = Math.max(1, out.getLastRow());
  const usedCols = 6;
  out.getRange(1, 1, usedRows, usedCols).setBorder(
    true, true, true, true, true, true,
    "black",
    SpreadsheetApp.BorderStyle.SOLID_MEDIUM
  );

  // –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é autosize_ –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
  autosize_(out, 6);
}

/************** READY: CUSTOM DATE RANGE **************/
function buildReadyCustomDateRange() {
  const ss = SpreadsheetApp.getActive();
  const ui = SpreadsheetApp.getUi();
  const tz = 'America/Chicago'; // CDT/CST –≤—Ä–µ–º—è
  const stamp = Utilities.formatDate(new Date(), tz, 'yyyy-MM-dd');

  // —Å–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–ª–æ–∫–∞—Ö
  const availableDates = findAvailableDatesInActiveBlocks_(ss);
  if (availableDates.length === 0) {
    ui.alert('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–ª–æ–∫–∞—Ö –Ω–µ–¥–µ–ª—å.');
    return;
  }

  // —Å–æ–∑–¥–∞—ë–º HTML –¥–∏–∞–ª–æ–≥ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç
  const dateRangeDialog = createDateRangeDialog_(availableDates);
  const htmlOutput = HtmlService.createHtmlOutput(dateRangeDialog)
    .setWidth(400)
    .setHeight(300);

  ui.showModalDialog(htmlOutput, '–í—ã–±–æ—Ä –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç –¥–ª—è READY');

  // –∂–¥—ë–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—ç—Ç–æ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–µ—Ä–µ–∑ PropertiesService)
  let selectedRange = null;
  let attempts = 0;
  const maxAttempts = 30; // 30 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è

  while (!selectedRange && attempts < maxAttempts) {
    Utilities.sleep(1000);
    selectedRange = PropertiesService.getScriptProperties().getProperty('selectedDateRange');
    attempts++;
  }

  if (!selectedRange) {
    return; // –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç
  }

  // –æ—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  PropertiesService.getScriptProperties().deleteProperty('selectedDateRange');

  const rangeData = JSON.parse(selectedRange);
  const startDateInfo = availableDates[rangeData.startIndex];
  const endDateInfo = availableDates[rangeData.endIndex];

  const outName = `READY Range ${startDateInfo.day}-${startDateInfo.monthName} to ${endDateInfo.day}-${endDateInfo.monthName} ${stamp}`;
  let out = ss.getSheetByName(outName);
  if (!out) out = ss.insertSheet(outName);
  out.clear({contentsOnly:true});

  // –ø–æ–ª—É—á–∞–µ–º –¥–Ω–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
  const targetDates = availableDates.slice(startDateInfo.index, endDateInfo.index + 1);
  const targetDays = targetDates.map(d => d.day);

  if (targetDays.length === 0) {
    out.getRange('A1').setValue('No valid days found in the specified range.');
    return;
  }

  // –∫–∞–Ω–¥–∏–¥–∞—Ç—ã
  const candidates = [];
  let orderSeq = 0;
  let headerBlock = null;

  for (const name of TEAMS) {
    const sh = ss.getSheetByName(name);
    if (!sh) continue;
    const block = findActiveWeekBlock_(sh);
    if (!block) continue;
    if (!headerBlock) headerBlock = {sh, block}; // –∑–∞–ø–æ–º–Ω–∏–º –¥–ª—è —à–∞–ø–∫–∏

    // —á–∏—Ç–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–∞—Ç –¥–ª—è —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞
    const headerVals = sh.getRange(block.hdrRow, block.startCol, 1, DAYS_IN_WEEK).getDisplayValues()[0];

    // –∏—â–µ–º –ø–æ–∑–∏—Ü–∏–∏ –≤—Å–µ—Ö —Ü–µ–ª–µ–≤—ã—Ö –¥–Ω–µ–π –≤ —Ä–∞–∑–Ω—ã—Ö –±–ª–æ–∫–∞—Ö
    const targetIndices = [];

    // –≥—Ä—É–ø–ø–∏—Ä—É–µ–º —Ü–µ–ª–µ–≤—ã–µ –¥–∞—Ç—ã –ø–æ –±–ª–æ–∫–∞–º
    const blockGroups = new Map();
    for (const targetDate of targetDates) {
      const blockKey = `${targetDate.blockInfo.startCol}`;
      if (!blockGroups.has(blockKey)) {
        blockGroups.set(blockKey, {
          startCol: targetDate.blockInfo.startCol,
          indices: []
        });
      }
      blockGroups.get(blockKey).indices.push({
        index: targetDate.blockInfo.blockIndex,
        day: targetDate.day,
        header: `${targetDate.dayName} ${targetDate.day}-${targetDate.monthName}`
      });
    }

    // —á–∏—Ç–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞ –∏ –Ω–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–Ω–∏
    for (const [blockKey, blockGroup] of blockGroups) {
      try {
        const blockHeaderVals = sh.getRange(block.hdrRow, blockGroup.startCol, 1, DAYS_IN_WEEK).getDisplayValues()[0];

        for (let d = 0; d < DAYS_IN_WEEK; d++) {
          const headerText = String(blockHeaderVals[d] ?? '').trim();
          const dayMatch = headerText.match(/\b(\d{1,2})\b/);
          if (dayMatch) {
            const headerDay = parseInt(dayMatch[1]);
            const matchingTarget = blockGroup.indices.find(t => t.day === headerDay);
            if (matchingTarget) {
              targetIndices.push({
                index: d,
                day: headerDay,
                header: headerText,
                blockStartCol: blockGroup.startCol
              });
            }
          }
        }
      } catch (e) {
        continue;
      }
    }

    // –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –¥–Ω–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É
    if (targetIndices.length === 0) continue;

    const lastRow = sh.getLastRow();
    if (lastRow < DATA_START_ROW) continue;

    const numRows = lastRow - DATA_START_ROW + 1;

    // —á–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–ª–æ–∫–æ–≤
    const blockData = new Map();
    for (const [blockKey, blockGroup] of blockGroups) {
      try {
        const blockStartCol = blockGroup.startCol;
        const blockVals = sh.getRange(DATA_START_ROW, blockStartCol, numRows, DAYS_IN_WEEK).getValues();
        const blockBgs = sh.getRange(DATA_START_ROW, blockStartCol, numRows, DAYS_IN_WEEK).getBackgrounds();
        blockData.set(blockKey, {vals: blockVals, bgs: blockBgs});
      } catch (e) {
        continue;
      }
    }

    for (let i = 0; i < numRows; i++) {
      // –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ü–µ–ª–µ–≤—ã–µ –¥–Ω–∏ - –¥–æ–ª–∂–Ω—ã –í–°–ï –±—ã—Ç—å RED READY
      let allDaysReady = true;
      for (const targetIndex of targetIndices) {
        const blockKey = `${targetIndex.blockStartCol}`;
        const blockInfo = blockData.get(blockKey);
        if (!blockInfo) {
          allDaysReady = false;
          break;
        }

        const dayVal = String(blockInfo.vals[i][targetIndex.index] ?? '').trim().toLowerCase();
        const dayBg = String(blockInfo.bgs[i][targetIndex.index] ?? '').toLowerCase();
        const isDayReady = (dayVal === 'ready') && (REDS.has(dayBg) || isRedLoose_(dayBg));

        if (!isDayReady) {
          allDaysReady = false;
          break;
        }
      }

      if (!allDaysReady) continue;

      const row = DATA_START_ROW + i;
      candidates.push({
        sheet: sh, row, count: targetIndices.length, maxRun: targetIndices.length,
        score: 1, order: orderSeq++, block, targetIndices, blockData
      });
    }
  }

  if (!headerBlock) {
    out.getRange('A1').setValue('No active week block found.');
    return;
  }

  // —à–∞–ø–∫–∞ - –∫–æ–ø–∏—Ä—É–µ–º E:F + –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–Ω–∏ + WEEK + NOTES
  const hSh = headerBlock.sh;
  const hBlock = headerBlock.block;

  // –∫–æ–ø–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ –≤—Å–µ—Ö –±–ª–æ–∫–æ–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
  const headerTargetIndices = [];

  // —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–ª–µ–≤—ã–µ –¥–∞—Ç—ã –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
  const sortedTargetDates = [...targetDates].sort((a, b) => {
    // —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å–Ω–∞—á–∞–ª–∞ –ø–æ –Ω–æ–º–µ—Ä—É –±–ª–æ–∫–∞ (—Å—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞), –ø–æ—Ç–æ–º –ø–æ –¥–Ω—é
    if (a.blockInfo.startCol !== b.blockInfo.startCol) {
      return a.blockInfo.startCol - b.blockInfo.startCol;
    }
    return a.day - b.day;
  });

  for (const targetDate of sortedTargetDates) {
    try {
      const blockHeaderVals = hSh.getRange(hBlock.hdrRow, targetDate.blockInfo.startCol, 1, DAYS_IN_WEEK).getDisplayValues()[0];
      const headerText = String(blockHeaderVals[targetDate.blockInfo.blockIndex] ?? '').trim();

      headerTargetIndices.push({
        index: targetDate.blockInfo.blockIndex,
        day: targetDate.day,
        header: headerText,
        blockStartCol: targetDate.blockInfo.startCol
      });
    } catch (e) {
      // –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ targetDate
      headerTargetIndices.push({
        index: targetDate.blockInfo.blockIndex,
        day: targetDate.day,
        header: `${targetDate.dayName} ${targetDate.day}-${targetDate.monthName}`,
        blockStartCol: targetDate.blockInfo.startCol
      });
    }
  }

  // –∫–æ–ø–∏—Ä—É–µ–º —à–∞–ø–∫—É
  try {
    // E1:F1 -> A1:B1
    hSh.getRange(1, colLetterToIndex_('E'), 1, 2)
      .copyTo(out.getRange(1, 1, 1, 2), {contentsOnly:false});

    // –¥–Ω–∏ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (–º–æ–≥—É—Ç –±—ã—Ç—å –∏–∑ —Ä–∞–∑–Ω—ã—Ö –±–ª–æ–∫–æ–≤)
    let colOffset = 3; // –Ω–∞—á–∏–Ω–∞–µ–º —Å –∫–æ–ª–æ–Ω–∫–∏ C
    for (const headerTarget of headerTargetIndices) {
      hSh.getRange(hBlock.hdrRow, headerTarget.blockStartCol + headerTarget.index, 1, 1)
        .copyTo(out.getRange(1, colOffset, 1, 1), {contentsOnly:false});
      colOffset++;
    }

    // WEEK
    hSh.getRange(1, hBlock.weekCol, 1, 1)
      .copyTo(out.getRange(1, colOffset, 1, 1), {contentsOnly:false});
    colOffset++;

    // NOTES
    hSh.getRange(1, hBlock.notesCol, 1, 1)
      .copyTo(out.getRange(1, colOffset, 1, 1), {contentsOnly:false});

    const totalCols = colOffset;

    // –¥–µ–ª–∞–µ–º –≤—Å—é —à–∞–ø–∫—É bold —Å –±–µ–ª—ã–º —Ç–µ–∫—Å—Ç–æ–º
    out.getRange(1, 1, 1, totalCols).setFontWeight('bold').setFontColor('white');

    if (candidates.length === 0) {
      out.getRange('A2').setValue(`No drivers with RED READY in all days of range ${startDateInfo.day}-${startDateInfo.monthName} to ${endDateInfo.day}-${endDateInfo.monthName} found.`);
      autosize_(out, totalCols);
      return;
    }

    candidates.sort((a,b) => b.score - a.score || b.count - a.count || a.order - b.order);

    // –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –ø–æ E:F
    const uniqueCandidates = deduplicateCandidates_(candidates);

    // –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ –ª–∏—Å—Ç–∞–º –¥–ª—è –±–∞—Ç—á–µ–≤–æ–≥–æ —á—Ç–µ–Ω–∏—è
    const sheetCandidates = new Map();
    for (const c of uniqueCandidates) {
      const sheetId = c.sheet.getName();
      if (!sheetCandidates.has(sheetId)) {
        sheetCandidates.set(sheetId, {sheet: c.sheet, block: c.block, candidates: []});
      }
      sheetCandidates.get(sheetId).candidates.push(c);
    }

    // –±–∞—Ç—á–µ–≤–æ–µ —á—Ç–µ–Ω–∏–µ –∏ –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö
    const allVals = [];
    const allBgs = [];

    for (const {sheet, block, candidates: groupCandidates} of sheetCandidates.values()) {
      const rows = groupCandidates.map(c => c.row);
      const minRow = Math.min(...rows);
      const maxRow = Math.max(...rows);
      const numRows = maxRow - minRow + 1;

      const efStart = colLetterToIndex_('E') - 1; // 0-based
      const weekStart = block.weekCol - 1;
      const notesStart = block.notesCol - 1;

      const allSheetVals = sheet.getRange(minRow, 1, numRows, sheet.getLastColumn()).getDisplayValues();
      const allSheetBgs = sheet.getRange(minRow, 1, numRows, sheet.getLastColumn()).getBackgrounds();

      for (const candidate of groupCandidates) {
        const rowIndex = candidate.row - minRow;
        const fullVals = allSheetVals[rowIndex];
        const fullBgs = allSheetBgs[rowIndex];

        const rowVals = [
          fullVals[efStart], fullVals[efStart + 1] // E:F
        ];
        const rowBgs = [
          fullBgs[efStart], fullBgs[efStart + 1] // E:F
        ];

        // –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ü–µ–ª–µ–≤—ã–µ –¥–Ω–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –±–ª–æ–∫–æ–≤
        for (const targetIndex of candidate.targetIndices) {
          const blockKey = `${targetIndex.blockStartCol}`;
          const dayStart = targetIndex.blockStartCol - 1 + targetIndex.index;
          rowVals.push(fullVals[dayStart]);
          rowBgs.push(fullBgs[dayStart]);
        }

        // WEEK + NOTES
        rowVals.push(fullVals[weekStart], fullVals[notesStart]);
        rowBgs.push(fullBgs[weekStart], fullBgs[notesStart]);

        allVals.push(rowVals);
        allBgs.push(rowBgs);
      }
    }

    if (allVals.length > 0) {
      // –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
      out.getRange(2, 1, allVals.length, totalCols).setValues(allVals);
      out.getRange(2, 1, allBgs.length, totalCols).setBackgrounds(allBgs);
    }

    // –¥–æ–±–∞–≤–ª—è–µ–º borders
    const usedRows = Math.max(1, out.getLastRow());
    out.getRange(1, 1, usedRows, totalCols).setBorder(
      true, true, true, true, true, true,
      "black",
      SpreadsheetApp.BorderStyle.SOLID_MEDIUM
    );

    // autosize
    autosize_(out, totalCols);

  } catch (e) {
    out.getRange('A1').setValue(`Error: ${e.toString()}`);
  }
}

// –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–ª–æ–∫–∞—Ö –Ω–µ–¥–µ–ª—å (—Ç–µ–∫—É—â–∏–π + –ø—Ä–µ–¥—ã–¥—É—â–∏–π)
function findAvailableDatesInActiveBlocks_(ss) {
  const teamSheets = ss.getSheets().filter(sh => TEAM_NAME_PATTERN.test(sh.getName()));
  const availableDates = [];

  for (const sh of teamSheets) {
    try {
      const lastRow = sh.getLastRow();
      const lastCol = sh.getLastColumn();
      if (lastRow < UG_DATA_START_ROW) continue;

      // –∏—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –±–ª–æ–∫ –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –±–ª–æ–∫
      const activeBlock = findActiveWeekBlock_(sh);
      if (!activeBlock) continue;

      const blocks = [activeBlock];

      // –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –±–ª–æ–∫ (–Ω–∞ 12 –∫–æ–ª–æ–Ω–æ–∫ –ª–µ–≤–µ–µ)
      const prevBlockStartCol = activeBlock.startCol - 12;
      if (prevBlockStartCol >= colLetterToIndex_('AK')) {
        const prevBlock = {
          startCol: prevBlockStartCol,
          weekCol: prevBlockStartCol + 8,
          hdrRow: activeBlock.hdrRow,
          notesCol: activeBlock.notesCol // –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ NOTES
        };

        // –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –±–ª–æ–∫–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
        try {
          const sampleData = sh.getRange(3, prevBlock.weekCol, Math.min(5, lastRow - 2), 1).getValues();
          let hasData = false;
          for (const row of sampleData) {
            if (row[0] && String(row[0]).trim() !== '') {
              hasData = true;
              break;
            }
          }
          if (hasData) {
            blocks.unshift(prevBlock); // –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –±–ª–æ–∫ –≤ –Ω–∞—á–∞–ª–æ
          }
        } catch (e) {
          // –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –±–ª–æ–∫–∞
        }
      }

      // —á–∏—Ç–∞–µ–º –¥–∞—Ç—ã –∏–∑ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤
      for (const block of blocks) {
        const headerVals = sh.getRange(block.hdrRow, block.startCol, 1, DAYS_IN_WEEK).getDisplayValues()[0];

        for (let d = 0; d < DAYS_IN_WEEK; d++) {
          const headerText = String(headerVals[d] ?? '').trim();
          const dateInfo = parseDateFromHeader_(headerText);
          if (dateInfo) {
            // –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–∞–∫–æ–π –¥–∞—Ç—ã –µ—â—ë –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ
            const exists = availableDates.some(existing =>
              existing.day === dateInfo.day && existing.monthName === dateInfo.monthName
            );
            if (!exists) {
              availableDates.push({
                ...dateInfo,
                index: availableDates.length,
                blockInfo: {
                  startCol: block.startCol,
                  weekCol: block.weekCol,
                  blockIndex: d
                }
              });
            }
          }
        }
      }

      // –µ—Å–ª–∏ –Ω–∞—à–ª–∏ –¥–∞—Ç—ã –≤ –ø–µ—Ä–≤–æ–º –ª–∏—Å—Ç–µ, –±–æ–ª—å—à–µ –Ω–µ –∏—â–µ–º
      if (availableDates.length > 0) break;

    } catch (e) {
      continue;
    }
  }

  return availableDates;
}

// –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
function parseDateFromHeader_(headerText) {
  if (!headerText) return null;

  // –∏—â–µ–º –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
  const dayMatch = headerText.match(/\b(\d{1,2})\b/);
  if (!dayMatch) return null;

  const day = parseInt(dayMatch[1]);

  // –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
  let dayName = 'Day';
  const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
  for (const name of dayNames) {
    if (headerText.toLowerCase().includes(name.toLowerCase())) {
      dayName = name;
      break;
    }
  }

  // –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—è—Ü (–ø–æ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–µ –∫–∞–∫ fallback)
  const now = new Date();
  const currentMonth = now.getMonth();
  const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
                      'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];

  // –µ—Å–ª–∏ –¥–µ–Ω—å –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
  // –µ—Å–ª–∏ –º–µ–Ω—å—à–µ - –≤–æ–∑–º–æ–∂–Ω–æ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
  let monthIndex = currentMonth;
  const currentDay = now.getDate();

  if (day > currentDay + 7) {
    // —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
    monthIndex = currentMonth === 0 ? 11 : currentMonth - 1;
  } else if (day < currentDay - 7) {
    // —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
    monthIndex = currentMonth === 11 ? 0 : currentMonth + 1;
  }

  return {
    day: day,
    dayName: dayName,
    monthName: monthNames[monthIndex]
  };
}

// –ü–æ–∏—Å–∫ –¥–∞—Ç—ã –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º—É –≤–≤–æ–¥—É
function findDateByInput_(availableDates, input) {
  if (!input) return null;

  // –∏—â–µ–º –ø–æ —Ñ–æ—Ä–º–∞—Ç—É "–¥–µ–Ω—å-–º–µ—Å—è—Ü" (–Ω–∞–ø—Ä–∏–º–µ—Ä "8-Sep")
  const match = input.match(/(\d{1,2})-?([a-zA-Z]{3})/);
  if (match) {
    const day = parseInt(match[1]);
    const monthName = match[2];

    return availableDates.find(d =>
      d.day === day &&
      d.monthName.toLowerCase() === monthName.toLowerCase()
    );
  }

  // –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ —á–∏—Å–ª—É
  const dayOnly = parseInt(input);
  if (!isNaN(dayOnly)) {
    return availableDates.find(d => d.day === dayOnly);
  }

  return null;
}

// –°–æ–∑–¥–∞–Ω–∏–µ HTML –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç
function createDateRangeDialog_(availableDates) {
  const dateOptions = availableDates.map((d, index) =>
    `<option value="${index}">${d.dayName} ${d.day}-${d.monthName}</option>`
  ).join('');

  return `
    <html>
      <head>
        <style>
          body {
            font-family: Arial, sans-serif;
            padding: 20px;
            background: #f5f5f5;
          }
          .container {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
          }
          .form-group {
            margin-bottom: 15px;
          }
          label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
            color: #333;
          }
          select {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
          }
          .buttons {
            margin-top: 20px;
            text-align: right;
          }
          button {
            padding: 10px 20px;
            margin-left: 10px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
          }
          .btn-primary {
            background: #4CAF50;
            color: white;
          }
          .btn-secondary {
            background: #f44336;
            color: white;
          }
          .btn-primary:hover {
            background: #45a049;
          }
          .btn-secondary:hover {
            background: #d32f2f;
          }
        </style>
      </head>
      <body>
        <div class="container">
          <h3>–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –¥–ª—è READY –æ—Ç—á—ë—Ç–∞</h3>

          <div class="form-group">
            <label for="startDate">–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞:</label>
            <select id="startDate">
              ${dateOptions}
            </select>
          </div>

          <div class="form-group">
            <label for="endDate">–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞:</label>
            <select id="endDate">
              ${dateOptions}
            </select>
          </div>

          <div class="buttons">
            <button class="btn-secondary" onclick="cancelSelection()">–û—Ç–º–µ–Ω–∞</button>
            <button class="btn-primary" onclick="confirmSelection()">–°–æ–∑–¥–∞—Ç—å –æ—Ç—á—ë—Ç</button>
          </div>
        </div>

        <script>
          function confirmSelection() {
            const startIndex = parseInt(document.getElementById('startDate').value);
            const endIndex = parseInt(document.getElementById('endDate').value);

            if (startIndex > endIndex) {
              alert('–û—à–∏–±–∫–∞: –Ω–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã');
              return;
            }

            // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä —á–µ—Ä–µ–∑ Google Apps Script
            google.script.run
              .withSuccessHandler(() => google.script.host.close())
              .withFailureHandler((error) => {
                alert('–û—à–∏–±–∫–∞: ' + error.toString());
              })
              .saveDateRangeSelection({startIndex: startIndex, endIndex: endIndex});
          }

          function cancelSelection() {
            google.script.host.close();
          }
        </script>
      </body>
    </html>
  `;
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç
function saveDateRangeSelection(rangeData) {
  PropertiesService.getScriptProperties().setProperty('selectedDateRange', JSON.stringify(rangeData));
}

// –°–æ–∑–¥–∞–Ω–∏–µ HTML –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–µ–¥–µ–ª–∏
function createWeekSelectionDialog_(availableWeeks) {
  const weekOptions = availableWeeks.map(week =>
    `<option value="${week}">WEEK ${week}</option>`
  ).join('');

  return `
    <html>
      <head>
        <style>
          body {
            font-family: Arial, sans-serif;
            padding: 20px;
            background: #f5f5f5;
          }
          .container {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
          }
          .form-group {
            margin-bottom: 20px;
          }
          label {
            display: block;
            margin-bottom: 8px;
            font-weight: bold;
            color: #333;
          }
          select {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 16px;
            background: white;
          }
          .buttons {
            margin-top: 20px;
            text-align: right;
          }
          button {
            padding: 12px 24px;
            margin-left: 10px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            font-weight: bold;
          }
          .btn-primary {
            background: #4CAF50;
            color: white;
          }
          .btn-secondary {
            background: #f44336;
            color: white;
          }
          .btn-primary:hover {
            background: #45a049;
          }
          .btn-secondary:hover {
            background: #d32f2f;
          }
          h3 {
            color: #333;
            margin-bottom: 20px;
          }
        </style>
      </head>
      <body>
        <div class="container">
          <h3>üìä –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é –¥–ª—è WEEK –æ—Ç—á—ë—Ç–∞</h3>

          <div class="form-group">
            <label for="weekSelect">–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–µ–¥–µ–ª–∏:</label>
            <select id="weekSelect">
              ${weekOptions}
            </select>
          </div>

          <div class="buttons">
            <button class="btn-secondary" onclick="cancelWeekSelection()">–û—Ç–º–µ–Ω–∞</button>
            <button class="btn-primary" onclick="confirmWeekSelection()">–°–æ–∑–¥–∞—Ç—å WEEK –æ—Ç—á—ë—Ç</button>
          </div>
        </div>

        <script>
          function confirmWeekSelection() {
            const selectedWeek = document.getElementById('weekSelect').value;

            if (!selectedWeek) {
              alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é');
              return;
            }

            // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä —á–µ—Ä–µ–∑ Google Apps Script
            google.script.run
              .withSuccessHandler(() => google.script.host.close())
              .withFailureHandler((error) => {
                alert('–û—à–∏–±–∫–∞: ' + error.toString());
              })
              .saveWeekSelection(selectedWeek);
          }

          function cancelWeekSelection() {
            google.script.host.close();
          }
        </script>
      </body>
    </html>
  `;
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –Ω–µ–¥–µ–ª–∏
function saveWeekSelection(weekNumber) {
  PropertiesService.getScriptProperties().setProperty('selectedWeek', weekNumber);
}

/************** UNDERGROSS: MAIN (history H,I,J,K,U,AG ‚Üí days AK‚ÄìAQ ‚Üí AS) **************/
function buildUnderGrossReports() {
  const ss = SpreadsheetApp.getActive();
  const tz = ss.getSpreadsheetTimeZone();
  const stamp = Utilities.formatDate(new Date(), tz, 'yyyy-MM-dd');

  const teamSheets = ss.getSheets().filter(sh => TEAM_NAME_PATTERN.test(sh.getName()));
  if (teamSheets.length === 0) {
    SpreadsheetApp.getUi().alert('–ù–µ –Ω–∞—à—ë–ª –ª–∏—Å—Ç–æ–≤ "Team ‚Ä¶". –ü—Ä–æ–≤–µ—Ä—å –Ω–∞–∑–≤–∞–Ω–∏—è.');
    return;
  }

  for (const sh of teamSheets) {
    try {
      const lastRow = sh.getLastRow();
      const lastCol = sh.getLastColumn();
      if (lastRow < UG_DATA_START_ROW) continue;


      const block = findLastWeekBlock_(sh, lastRow, lastCol);
      if (!block) {
        makeOutSheet_(ss, sh.getName(), stamp)
          .getRange(('A2')).setValue('–ù–µ –Ω–∞–π–¥–µ–Ω –Ω–µ–ø—É—Å—Ç–æ–π –Ω–µ–¥–µ–ª—å–Ω—ã–π –±–ª–æ–∫ (AK..AS —Å —à–∞–≥–æ–º 12).');
        continue;
      }

      const {daysStartCol, weekGrossCol} = block; // AK..AS/BE/BP...
      const numRows = lastRow - UG_DATA_START_ROW + 1;


      // —Å—Ç—Ä–æ–∏–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –∏—Å—Ç–æ—Ä–∏—é: H,I,J,K,U,AG + –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –Ω–µ–¥–µ–ª–∏
      const rankStart = colLetterToIndex_('H');
      const agCol = colLetterToIndex_('AG');
      const rankEnd = Math.max(agCol, weekGrossCol);

      // –±–∞–∑–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è + –≤—Å–µ –Ω–µ–¥–µ–ª–∏ –¥–æ —Ç–µ–∫—É—â–µ–π
      const allRankCols = [...BASE_RANK_COLS];
      const firstWeekCol = colLetterToIndex_('AS'); // –ø–µ—Ä–≤–∞—è –Ω–µ–¥–µ–ª—è AS
      for (let weekCol = firstWeekCol; weekCol < weekGrossCol; weekCol += WEEK_BLOCK_WIDTH) {
        allRankCols.push(colIndexToLetter_(weekCol));
      }

      const rankOffsets = allRankCols.map(c => colLetterToIndex_(c) - rankStart);
      const currentWeekOff = weekGrossCol - rankStart; // —Ç–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è offset

      const valsEF    = sh.getRange(UG_DATA_START_ROW, colLetterToIndex_('E'),  numRows, 2).getDisplayValues();
      const bgsEF     = sh.getRange(UG_DATA_START_ROW, colLetterToIndex_('E'),  numRows, 2).getBackgrounds();
      const valsRank  = sh.getRange(UG_DATA_START_ROW, rankStart,               numRows, rankEnd - rankStart + 1).getDisplayValues();
      const bgsRank   = sh.getRange(UG_DATA_START_ROW, rankStart,               numRows, rankEnd - rankStart + 1).getBackgrounds();

      // –≤—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–µ–¥–µ–ª—å–Ω—ã–π –±–ª–æ–∫ AK..AS (–¥–Ω–∏ AK..AQ –æ—Ç–¥–µ–ª—å–Ω–æ)
      const valsWeekFull  = sh.getRange(UG_DATA_START_ROW, daysStartCol,        numRows, WEEK_DAYS_LEN + 1).getDisplayValues();
      const bgsWeekFull   = sh.getRange(UG_DATA_START_ROW, daysStartCol,        numRows, WEEK_DAYS_LEN + 1).getBackgrounds();

      // —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–µ
      const rows = [];


      for (let i = 0; i < numRows; i++) {
        const currentWeekVal = toNumber_(valsRank[i][currentWeekOff]);
        if (currentWeekVal === null || currentWeekVal >= UG_THRESHOLD) continue;

        let belowCnt = 0;
        // —Å—á–∏—Ç–∞–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é H,I,J,K,U,AG + –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –Ω–µ–¥–µ–ª–∏
        for (const off of rankOffsets) {
          const v = toNumber_(valsRank[i][off]);
          if (v !== null && v < UG_THRESHOLD) belowCnt++;
        }
        // –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
        if (currentWeekVal < UG_THRESHOLD) belowCnt++;

        rows.push({i, belowCnt, orig: i});

      }


      rows.sort((a,b) => (b.belowCnt - a.belowCnt) || (a.orig - b.orig));

      // –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è —Å—Ç—Ä–æ–∫ –ø–æ E:F - –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ valsEF
      const uniqueRows = deduplicateUGRowsFast_(rows, valsEF);


      const out = makeOutSheet_(ss, sh.getName(), stamp);
      out.clear({contentsOnly:true});

      // ---- –®–ê–ü–ö–ê ---- –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è
      const headerVals = [];
      const headerBgs = [];

      // E:F –∑–∞–≥–æ–ª–æ–≤–∫–∏
      const efHeader = sh.getRange(1, colLetterToIndex_('E'), 1, 2).getDisplayValues()[0];
      const efHeaderBgs = sh.getRange(1, colLetterToIndex_('E'), 1, 2).getBackgrounds()[0];
      headerVals.push(...efHeader);
      headerBgs.push(...efHeaderBgs);

      // –ò—Å—Ç–æ—Ä–∏—è –∫–æ–ª–æ–Ω–∫–∏
      for (const rankCol of allRankCols) {
        const colIndex = colLetterToIndex_(rankCol);
        const val = sh.getRange(1, colIndex, 1, 1).getDisplayValues()[0][0];
        const bg = sh.getRange(1, colIndex, 1, 1).getBackgrounds()[0][0];
        headerVals.push(val);
        headerBgs.push(bg);
      }

      // –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
      const daysHeader = sh.getRange(1, daysStartCol, 1, WEEK_DAYS_LEN).getDisplayValues()[0];
      const daysHeaderBgs = sh.getRange(1, daysStartCol, 1, WEEK_DAYS_LEN).getBackgrounds()[0];
      headerVals.push(...daysHeader);
      headerBgs.push(...daysHeaderBgs);

      // –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è
      const weekHeader = sh.getRange(1, weekGrossCol, 1, 1).getDisplayValues()[0][0];
      const weekHeaderBg = sh.getRange(1, weekGrossCol, 1, 1).getBackgrounds()[0][0];
      headerVals.push(weekHeader);
      headerBgs.push(weekHeaderBg);

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
      const totalHeaderCols = 2 + allRankCols.length + WEEK_DAYS_LEN + 1;
      out.getRange(1, 1, 1, totalHeaderCols).setValues([headerVals]);
      out.getRange(1, 1, 1, totalHeaderCols).setBackgrounds([headerBgs]);
      out.getRange(1, 1, 1, totalHeaderCols).setFontWeight('bold').setFontColor('white');

      // ---- –î–ê–ù–ù–´–ï ----
      if (uniqueRows.length === 0) {
        out.getRange('A2').setValue('–ù–µ—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–π —Å –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–º < 7000 –≤ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–µ.');
      } else {
        const outVals = [];
        const outBgs  = [];
        const histOffsets = allRankCols.map(c => colLetterToIndex_(c) - rankStart);
        for (const r of uniqueRows) {
          const i = r.i;
          const histVals = histOffsets.map(off => valsRank[i][off]);
          const histBgs  = histOffsets.map(off => bgsRank[i][off]);
          const weekVals = valsWeekFull[i].slice(0, WEEK_DAYS_LEN);
          const weekBgs  = bgsWeekFull[i].slice(0, WEEK_DAYS_LEN);
          const currentWeekVal = valsRank[i][currentWeekOff];
          const currentWeekBg  = bgsRank[i][currentWeekOff];
          outVals.push([...valsEF[i], ...histVals, ...weekVals, currentWeekVal]);
          outBgs.push([...bgsEF[i],  ...histBgs,  ...weekBgs,  currentWeekBg]);
        }
        const R = outVals.length, C = outVals[0].length;
        out.getRange(2,1,R,C).setValues(outVals);
        out.getRange(2,1,R,C).setBackgrounds(outBgs);
      }

      const totalCols = 2 + allRankCols.length + WEEK_DAYS_LEN + 1;
      for (let c = 1; c <= totalCols; c++) out.autoResizeColumn(c);

      out.getRange('A2').setNote(`Selected days: ${colIndexToLetter_(daysStartCol)}..${colIndexToLetter_(daysStartCol + WEEK_DAYS_LEN - 1)}`);

      // ===== BORDERS (black, medium) =====
      const usedRows = Math.max(1, out.getLastRow());
      const usedCols = Math.max(1, out.getLastColumn());
      out.getRange(1, 1, usedRows, usedCols).setBorder(
        true, true, true, true, true, true,
        "black",
        SpreadsheetApp.BorderStyle.SOLID_MEDIUM
      );

    } catch (err) {
      const out = makeOutSheet_(ss, sh.getName(), stamp);
      out.getRange('A2').setValue('–û—à–∏–±–∫–∞: ' + (err && err.message ? err.message : err));
    }
  }
}

/************** RED BUTTON: delete all sheets except Team 1..5 and READY* **************/
function redButtonCleanup() {
  const ss = SpreadsheetApp.getActive();
  const ui = SpreadsheetApp.getUi();
  const resp = ui.alert(
    'RED BUTTON',
    '–£–¥–∞–ª–∏—Ç—å –í–°–ï –ª–∏—Å—Ç—ã, –∫—Ä–æ–º–µ Team 1..5 –∏ –ª–∏—Å—Ç–æ–≤, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è –Ω–∞ "READY"? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.',
    ui.ButtonSet.YES_NO
  );
  if (resp !== ui.Button.YES) return;

  const keepTeam = new Set(['Team 1','Team 2','Team 3','Team 4','Team 5']);
  const sheets = ss.getSheets();

  // –°–æ–±–µ—Ä—ë–º —Å–ø–∏—Å–æ–∫ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
  const toDelete = [];
  for (const sh of sheets) {
    const name = sh.getName();
    const isTeamKeep = keepTeam.has(name);
    const isReadyKeep = /^READY\b/i.test(name); // READY –∏–ª–∏ READY 2025-...
    if (!isTeamKeep && !isReadyKeep) {
      toDelete.push(sh);
    }
  }

  // –£–¥–∞–ª—è–µ–º, –∏–∑–±–µ–≥–∞—è —Å–∏—Ç—É–∞—Ü–∏–∏ "–ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–∏—Å—Ç"
  for (const sh of toDelete) {
    if (ss.getSheets().length <= 1) break; // safety
    ss.deleteSheet(sh);
  }

  ui.alert(`–ì–æ—Ç–æ–≤–æ. –£–¥–∞–ª–µ–Ω–æ –ª–∏—Å—Ç–æ–≤: ${toDelete.length}. –û—Å—Ç–∞–≤–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ Team 1..5 –∏ READY*.`);
}

/* ===== helpers ===== */
function findActiveWeekBlock_(sh) {
  const maxCol = sh.getMaxColumns();
  let start = colLetterToIndex_(FIRST_BLOCK_START);
  let found = null;
  while (start + 10 <= maxCol) {
    const hdrRow = detectDateHeaderRowInBlock_(sh, start);
    if (hdrRow) {
      found = { startCol: start, weekCol: start + 8, notesCol: start + 10, hdrRow };
    }
    start += BLOCK_STEP;
  }
  return found;
}

function findLastWeekBlock_(sh, lastRow, lastCol) {
  const firstDays = colLetterToIndex_('AK');
  let best = null;
  for (let start = firstDays; start <= lastCol; start += WEEK_BLOCK_WIDTH) {
    const weekGrossCol = start + WEEK_GROSS_OFFSET;
    if (weekGrossCol > lastCol) break;
    const colVals = sh.getRange(UG_DATA_START_ROW, weekGrossCol, lastRow - UG_DATA_START_ROW + 1, 1)
      .getDisplayValues().map(r => r[0]).filter(v => v && String(v).trim() !== '');
    if (colVals.length > 0) best = {daysStartCol: start, weekGrossCol, width: WEEK_DAYS_LEN + 1};
  }
  return best;
}

function detectDateHeaderRowInBlock_(sh, startCol) {
  const candidates = [1,2,3];
  for (const r of candidates) {
    const vals = sh.getRange(r, startCol, 1, DAYS_IN_WEEK).getDisplayValues()[0];
    const ok = vals.every(v => {
      const s = String(v || '').trim().toLowerCase();
      if (!s) return false;
      if (s === 'ready' || s === 'enroute' || s === 'break') return false;
      return /[-/]/.test(s) || /(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i.test(s);
    });
    if (ok) return r;
  }
  return null;
}

function safeCopy_(srcSheet, srcRow, srcCol, numRows, numCols, dstSheet, dstRow, dstCol) {
  try {
    srcSheet.getRange(srcRow, srcCol, numRows, numCols)
            .copyTo(dstSheet.getRange(dstRow, dstCol, numRows, numCols), {contentsOnly:false});
  } catch (_) {}
}

function isRedLoose_(hex) {
  if (!/^#[0-9a-fA-F]{6}$/.test(hex)) return false;
  const r = parseInt(hex.slice(1,3),16),
        g = parseInt(hex.slice(3,5),16),
        b = parseInt(hex.slice(5,7),16);
  return r >= 200 && g <= 90 && b <= 90;
}

function colLetterToIndex_(letter) {
  let n = 0;
  for (let i=0;i<letter.length;i++) n = n*26 + (letter.charCodeAt(i)-64);
  return n;
}

function colIndexToLetter_(index) {
  let result = '';
  while (index > 0) {
    index--;
    result = String.fromCharCode(65 + (index % 26)) + result;
    index = Math.floor(index / 26);
  }
  return result;
}

function autosize_(sheet, nCols) {
  for (let c = 1; c <= nCols; c++) sheet.autoResizeColumn(c);
}

function toNumber_(v) {
  if (typeof v === 'number') return v;
  if (v === null || v === undefined) return null;
  const s = String(v).replace(/[^0-9.\-]/g,'').trim();
  if (!s) return null;
  const num = parseFloat(s);
  return Number.isFinite(num) ? num : null;
}

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç 7 –¥–Ω–µ–π –∏ —Å—á–∏—Ç–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã (–º–∞–∫—Å–∏–º—É–º 1 –Ω–∞ –¥–µ–Ω—å)
 * –ò—â–µ—Ç —Å–ª–æ–≤–∞: break, issue, cancelled, trailer, truck
 */
function countProblemsInDays_(daysArray) {
  if (!Array.isArray(daysArray) || daysArray.length !== 7) {
    return 0;
  }

  const problemWords = ['break', 'issue', 'cancelled', 'trailer', 'truck'];
  let problemsCount = 0;

  for (let dayIndex = 0; dayIndex < 7; dayIndex++) {
    const dayValue = String(daysArray[dayIndex] || '').toLowerCase().trim();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–±–ª–µ–º–Ω–æ–µ —Å–ª–æ–≤–æ –≤ —ç—Ç–æ–º –¥–Ω–µ
    const hasProblem = problemWords.some(word => dayValue.includes(word));

    if (hasProblem) {
      problemsCount++; // –º–∞–∫—Å–∏–º—É–º 1 –ø—Ä–æ–±–ª–µ–º–∞ –Ω–∞ –¥–µ–Ω—å
    }
  }

  return problemsCount;
}

function makeOutSheet_(ss, teamName, stamp) {
  const name = `UG ${teamName} ${stamp}`;
  let sh = ss.getSheetByName(name);
  if (!sh) sh = ss.insertSheet(name);
  return sh;
}


function deduplicateCandidatesFast_(candidates) {
  if (candidates.length === 0) return [];

  const seen = new Set();
  const unique = [];

  // –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ –ª–∏—Å—Ç–∞–º –¥–ª—è –±–∞—Ç—á–µ–≤–æ–≥–æ —á—Ç–µ–Ω–∏—è
  const sheetGroups = new Map();
  for (const candidate of candidates) {
    const sheetName = candidate.sheet.getName();
    if (!sheetGroups.has(sheetName)) {
      sheetGroups.set(sheetName, []);
    }
    sheetGroups.get(sheetName).push(candidate);
  }

  // –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ª–∏—Å—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
  for (const [sheetName, groupCandidates] of sheetGroups) {
    const sh = groupCandidates[0].sheet;

    // –Ω–∞—Ö–æ–¥–∏–º –¥–∏–∞–ø–∞–∑–æ–Ω —Å—Ç—Ä–æ–∫ –¥–ª—è —á—Ç–µ–Ω–∏—è E:F
    const rows = groupCandidates.map(c => c.row);
    const minRow = Math.min(...rows);
    const maxRow = Math.max(...rows);
    const numRows = maxRow - minRow + 1;

    try {
      // —á–∏—Ç–∞–µ–º –≤–µ—Å—å –¥–∏–∞–ø–∞–∑–æ–Ω E:F –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
      const efData = sh.getRange(minRow, colLetterToIndex_('E'), numRows, 2).getDisplayValues();

      for (const candidate of groupCandidates) {
        const rowIndex = candidate.row - minRow;
        const efVals = efData[rowIndex];
        // –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–ª—é—á —Ç–æ–ª—å–∫–æ –ø–æ dispatcher + driver
        const key = `${efVals[0]}|${efVals[1]}`.toLowerCase().trim();


        if (!seen.has(key)) {
          seen.add(key);
          unique.push(candidate);

        }
      }
    } catch (e) {
      // –ø—Ä–∏ –æ—à–∏–±–∫–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –∏–∑ –≥—Ä—É–ø–ø—ã
      unique.push(...groupCandidates);
    }
  }

  return unique;
}


function deduplicateCandidates_(candidates) {
  if (candidates.length === 0) return [];

  const seen = new Set();
  const unique = [];
  const sheetGroups = new Map();

  for (const candidate of candidates) {
    const sheetName = candidate.sheet.getName();
    if (!sheetGroups.has(sheetName)) {
      sheetGroups.set(sheetName, []);
    }
    sheetGroups.get(sheetName).push(candidate);
  }

  for (const [sheetName, groupCandidates] of sheetGroups) {
    const sh = groupCandidates[0].sheet;
    const rows = groupCandidates.map(c => c.row);
    const minRow = Math.min(...rows);
    const maxRow = Math.max(...rows);
    const numRows = maxRow - minRow + 1;

    try {
      const efData = sh.getRange(minRow, colLetterToIndex_('E'), numRows, 2).getDisplayValues();

      for (const candidate of groupCandidates) {
        const rowIndex = candidate.row - minRow;
        const efVals = efData[rowIndex];
        const key = `${efVals[0]}|${efVals[1]}`.toLowerCase().trim();

        if (!seen.has(key)) {
          seen.add(key);
          unique.push(candidate);
        }
      }
    } catch (e) {
      unique.push(...groupCandidates);
    }
  }

  return unique;
}

function deduplicateUGRowsFast_(rows, valsEF) {
  const seen = new Set();
  const unique = [];

  for (const rowData of rows) {
    try {
      const efVals = valsEF[rowData.i];
      const key = `${efVals[0]}|${efVals[1]}`.toLowerCase().trim();

      if (!seen.has(key)) {
        seen.add(key);
        unique.push(rowData);
      }
    } catch (e) {
      unique.push(rowData);
    }
  }

  return unique;
}


/************** SELECT WEEK REPORT: CHOOSE ANY WEEK **************/
function buildSelectWeekReport() {
  const ss = SpreadsheetApp.getActive();
  const ui = SpreadsheetApp.getUi();

  // —Å–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–µ–¥–µ–ª–∏ –≤ –ª–∏—Å—Ç–∞—Ö –∫–æ–º–∞–Ω–¥
  const availableWeeks = findAvailableWeeks_(ss);
  if (availableWeeks.length === 0) {
    ui.alert('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –±–ª–æ–∫–æ–≤ –≤ –ª–∏—Å—Ç–∞—Ö –∫–æ–º–∞–Ω–¥.');
    return;
  }

  // –æ—Ç–ª–∞–¥–∫–∞: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–µ–¥–µ–ª–∏
  console.log('–ù–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–µ–¥–µ–ª–∏:', availableWeeks);
  ui.alert(`–ù–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–µ–¥–µ–ª–∏: ${availableWeeks.join(', ')}`);

  // –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –Ω–µ–¥–µ–ª—è –Ω–∞–π–¥–µ–Ω–∞, –ù–ï –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
  if (availableWeeks.length === 1) {
    const result = ui.alert(
      `–ù–∞–π–¥–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –Ω–µ–¥–µ–ª—è: ${availableWeeks[0]}. –°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç?`,
      ui.ButtonSet.YES_NO
    );
    if (result === ui.Button.YES) {
      buildWeekReportForSpecificWeek_(availableWeeks[0]);
    }
    return;
  }


  // –æ—á–∏—â–∞–µ–º –ª—é–±—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤—ã–±–æ—Ä—ã
  PropertiesService.getScriptProperties().deleteProperty('selectedWeek');

  // —Å–æ–∑–¥–∞—ë–º HTML –¥–∏–∞–ª–æ–≥ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–µ–¥–µ–ª–∏
  const weekSelectionDialog = createWeekSelectionDialog_(availableWeeks);
  const htmlOutput = HtmlService.createHtmlOutput(weekSelectionDialog)
    .setWidth(350)
    .setHeight(250);

  ui.showModalDialog(htmlOutput, '–í—ã–±–æ—Ä –Ω–µ–¥–µ–ª–∏ –¥–ª—è WEEK –æ—Ç—á—ë—Ç–∞');

  // –∂–¥—ë–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  let selectedWeek = null;
  let attempts = 0;
  const maxAttempts = 30; // 30 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è

  while (!selectedWeek && attempts < maxAttempts) {
    Utilities.sleep(1000);
    selectedWeek = PropertiesService.getScriptProperties().getProperty('selectedWeek');
    attempts++;
  }

  if (!selectedWeek) {
    return; // –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç
  }

  // –æ—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  PropertiesService.getScriptProperties().deleteProperty('selectedWeek');

  // –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—á—ë—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –Ω–µ–¥–µ–ª–∏
  buildWeekReportForSpecificWeek_(selectedWeek);
}

// –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–µ–¥–µ–ª—å –≤ –ª–∏—Å—Ç–∞—Ö –∫–æ–º–∞–Ω–¥
function findAvailableWeeks_(ss) {
  const teamSheets = ss.getSheets().filter(sh => TEAM_NAME_PATTERN.test(sh.getName()));
  const weeksSet = new Set();

  console.log('–ù–∞–π–¥–µ–Ω–æ –ª–∏—Å—Ç–æ–≤ –∫–æ–º–∞–Ω–¥:', teamSheets.length);

  for (const sh of teamSheets) {
    try {
      const lastCol = sh.getLastColumn();
      console.log(`–õ–∏—Å—Ç: ${sh.getName()}, lastCol: ${lastCol}`);

      // ‚ö° –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –±–∞—Ç—á–µ–≤–æ–µ —á—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –æ–¥–Ω–∏–º –≤—ã–∑–æ–≤–æ–º
      const searchLimit = Math.max(lastCol + 50, 200);
      console.log(`‚ö° –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ WEEK –∫–æ–ª–æ–Ω–æ–∫ –¥–æ ${searchLimit}`);

      try {
        // –ß–∏—Ç–∞–µ–º –í–°–ï –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ–¥–Ω–∏–º API –≤—ã–∑–æ–≤–æ–º –≤–º–µ—Å—Ç–æ 200+ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö
        const allHeaders = sh.getRange(1, 1, 1, searchLimit).getDisplayValues()[0];

        // –¢–µ–ø–µ—Ä—å –∏—â–µ–º –≤ –º–∞—Å—Å–∏–≤–µ - –û–ß–ï–ù–¨ –±—ã—Å—Ç—Ä–æ
        for (let weekCol = 0; weekCol < allHeaders.length; weekCol++) {
          const weekHeader = allHeaders[weekCol];

          if (!weekHeader || String(weekHeader).trim() === '') continue;

          // –∏–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
          const weekMatch = String(weekHeader).match(/\bWEEK\s*(\d+)/i);
          if (weekMatch) {
            const weekNumber = weekMatch[1];
            const actualCol = weekCol + 1; // –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ 1-based –∏–Ω–¥–µ–∫—Å
            console.log(`‚ö° –ù–∞–π–¥–µ–Ω–∞ –Ω–µ–¥–µ–ª—è: ${weekNumber} –≤ –∫–æ–ª–æ–Ω–∫–µ ${actualCol} (${colIndexToLetter_(actualCol)})`);

            weeksSet.add(weekNumber);
          }
        }
      } catch (e) {
        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–∞—Ç—á–µ–≤–æ–≥–æ —á—Ç–µ–Ω–∏—è –¥–ª—è ${sh.getName()}: ${e}`);
        // Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
        for (let weekCol = 1; weekCol <= Math.min(searchLimit, 100); weekCol++) {
          try {
            const weekHeader = sh.getRange(1, weekCol, 1, 1).getDisplayValues()[0][0];
            if (!weekHeader || String(weekHeader).trim() === '') continue;

            const weekMatch = String(weekHeader).match(/\bWEEK\s*(\d+)/i);
            if (weekMatch) {
              weeksSet.add(weekMatch[1]);
            }
          } catch (e2) {
            continue;
          }
        }
      }
    } catch (e) {
      continue;
    }
  }

  // —Å–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–¥–µ–ª–∏ –ø–æ —É–±—ã–≤–∞–Ω–∏—é (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
  const sortedWeeks = Array.from(weeksSet).sort((a, b) => parseInt(b) - parseInt(a));
  console.log('–ò—Ç–æ–≥–æ–≤—ã–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–µ–¥–µ–ª–∏:', sortedWeeks);
  return sortedWeeks;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–µ–¥–µ–ª–∏
function buildWeekReportForSpecificWeek_(weekNumber) {
  const ss = SpreadsheetApp.getActive();
  const tz = ss.getSpreadsheetTimeZone();
  const stamp = Utilities.formatDate(new Date(), tz, 'yyyy-MM-dd');

  const teamSheets = ss.getSheets().filter(sh => TEAM_NAME_PATTERN.test(sh.getName()));
  if (teamSheets.length === 0) {
    SpreadsheetApp.getUi().alert('–ù–µ –Ω–∞—à—ë–ª –ª–∏—Å—Ç–æ–≤ "Team ‚Ä¶". –ü—Ä–æ–≤–µ—Ä—å –Ω–∞–∑–≤–∞–Ω–∏—è.');
    return;
  }

  for (const sh of teamSheets) {
    try {
      const lastRow = sh.getLastRow();
      const lastCol = sh.getLastColumn();
      if (lastRow < UG_DATA_START_ROW) continue;

      // –Ω–∞—Ö–æ–¥–∏–º –±–ª–æ–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–µ–¥–µ–ª–∏
      const block = findWeekBlockByNumber_(sh, weekNumber, lastRow, lastCol);
      if (!block) {
        makeOutSheet_(ss, sh.getName(), stamp)
          .getRange('A2').setValue(`–ù–µ–¥–µ–ª—è ${weekNumber} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ ${sh.getName()}.`);
        continue;
      }

      const out = makeOutSheet_(ss, sh.getName(), stamp);
      out.clear({contentsOnly: true});

      // –∫–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –Ω–µ–¥–µ–ª–∏
      copySpecificWeekData_(sh, out, block, weekNumber, stamp);

    } catch (e) {
      console.error(`–û—à–∏–±–∫–∞ –¥–ª—è ${sh.getName()}:`, e);
    }
  }

  // —Å–æ–∑–¥–∞–µ–º –æ–±—â–∏–π –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
  createWeeklySummaryReport_(ss, teamSheets, weekNumber, stamp);
}

// –ü–æ–∏—Å–∫ –±–ª–æ–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–µ–¥–µ–ª–∏
function findWeekBlockByNumber_(sheet, weekNumber, lastRow, lastCol) {
  // ‚ö° –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –±–∞—Ç—á–µ–≤–æ–µ —á—Ç–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
  const searchLimit = Math.max(lastCol + 50, 200);

  try {
    // –ß–∏—Ç–∞–µ–º –í–°–ï –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ–¥–Ω–∏–º –≤—ã–∑–æ–≤–æ–º
    const allHeaders = sheet.getRange(1, 1, 1, searchLimit).getDisplayValues()[0];

    // –ò—â–µ–º –Ω—É–∂–Ω—É—é –Ω–µ–¥–µ–ª—é –≤ –º–∞—Å—Å–∏–≤–µ - –±—ã—Å—Ç—Ä–æ
    for (let weekCol = 0; weekCol < allHeaders.length; weekCol++) {
      const weekHeader = allHeaders[weekCol];
      if (!weekHeader || String(weekHeader).trim() === '') continue;

      // –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –Ω–µ–¥–µ–ª–∏
      const weekMatch = String(weekHeader).match(/\bWEEK\s*(\d+)/i);
      if (weekMatch && weekMatch[1] === weekNumber) {
        const actualCol = weekCol + 1; // –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ 1-based –∏–Ω–¥–µ–∫—Å

        // –¥–ª—è Week 35: WEEK –≤ U (21), –¥–Ω–∏ M-S (13-19)
        // –¥–ª—è Week 36: WEEK –≤ AG (33), –¥–Ω–∏ Y-AE (25-31)
        let daysStartCol = actualCol - 8; // –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ –¥–Ω–∏ –Ω–∞ 8 –∫–æ–ª–æ–Ω–æ–∫ –ª–µ–≤–µ–µ

        return {
          daysStartCol: daysStartCol,
          weekGrossCol: actualCol
        };
      }
    }
  } catch (e) {
    // Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É
    for (let weekCol = 1; weekCol <= Math.min(searchLimit, 100); weekCol++) {
      try {
        const weekHeader = sheet.getRange(1, weekCol, 1, 1).getDisplayValues()[0][0];
        if (!weekHeader || String(weekHeader).trim() === '') continue;

        const weekMatch = String(weekHeader).match(/\bWEEK\s*(\d+)/i);
        if (weekMatch && weekMatch[1] === weekNumber) {
          let daysStartCol = weekCol - 8;
          return {
            daysStartCol: daysStartCol,
            weekGrossCol: weekCol
          };
        }
      } catch (e2) {
        continue;
      }
    }
  }

  return null; // –Ω–µ –Ω–∞–π–¥–µ–Ω
}

// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–µ–¥–µ–ª–∏
function copySpecificWeekData_(sourceSheet, outSheet, block, weekNumber, stamp) {
  const {daysStartCol, weekGrossCol} = block;
  const lastRow = sourceSheet.getLastRow();
  const numRows = lastRow - UG_DATA_START_ROW + 1;

  // ---- –®–ê–ü–ö–ê ---- E:F + 7 –¥–Ω–µ–π + WEEK
  const headerVals = [];
  const headerBgs = [];

  // E:F –∑–∞–≥–æ–ª–æ–≤–∫–∏
  const efHeader = sourceSheet.getRange(1, colLetterToIndex_('E'), 1, 2).getDisplayValues()[0];
  const efHeaderBgs = sourceSheet.getRange(1, colLetterToIndex_('E'), 1, 2).getBackgrounds()[0];
  headerVals.push(...efHeader);
  headerBgs.push(...efHeaderBgs);

  // –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ (7 –¥–Ω–µ–π)
  const daysHeader = sourceSheet.getRange(1, daysStartCol, 1, WEEK_DAYS_LEN).getDisplayValues()[0];
  const daysHeaderBgs = sourceSheet.getRange(1, daysStartCol, 1, WEEK_DAYS_LEN).getBackgrounds()[0];
  headerVals.push(...daysHeader);
  headerBgs.push(...daysHeaderBgs);

  // WEEK
  const weekHeader = sourceSheet.getRange(1, weekGrossCol, 1, 1).getDisplayValues()[0][0];
  const weekHeaderBg = sourceSheet.getRange(1, weekGrossCol, 1, 1).getBackgrounds()[0][0];
  headerVals.push(weekHeader);
  headerBgs.push(weekHeaderBg);

  // ACTIVE DRIVERS STATUS (–Ω–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞)
  headerVals.push('ACTIVE DRIVERS');
  headerBgs.push('#4a4a4a'); // —Å–µ—Ä—ã–π —Ñ–æ–Ω –∫–∞–∫ —É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤

  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫: E:F + 7 –¥–Ω–µ–π + WEEK + STATUS = 11 –∫–æ–ª–æ–Ω–æ–∫
  const totalHeaderCols = 2 + WEEK_DAYS_LEN + 1 + 1; // 2 + 7 + 1 + 1 = 11
  outSheet.getRange(1, 1, 1, totalHeaderCols).setValues([headerVals]);
  outSheet.getRange(1, 1, 1, totalHeaderCols).setBackgrounds([headerBgs]);
  outSheet.getRange(1, 1, 1, totalHeaderCols).setFontWeight('bold').setFontColor('white');

  // ---- –î–ê–ù–ù–´–ï ---- –∫–æ–ø–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –Ω–µ–¥–µ–ª—é
  if (numRows > 0) {
    const efData = sourceSheet.getRange(UG_DATA_START_ROW, colLetterToIndex_('E'), numRows, 2).getDisplayValues();
    const efBgData = sourceSheet.getRange(UG_DATA_START_ROW, colLetterToIndex_('E'), numRows, 2).getBackgrounds();

    const daysData = sourceSheet.getRange(UG_DATA_START_ROW, daysStartCol, numRows, WEEK_DAYS_LEN).getDisplayValues();
    const daysBgData = sourceSheet.getRange(UG_DATA_START_ROW, daysStartCol, numRows, WEEK_DAYS_LEN).getBackgrounds();

    const weekData = sourceSheet.getRange(UG_DATA_START_ROW, weekGrossCol, numRows, 1).getDisplayValues();
    const weekBgData = sourceSheet.getRange(UG_DATA_START_ROW, weekGrossCol, numRows, 1).getBackgrounds();

    // —Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞–º –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    const dispatcherGroups = [];
    let currentGroup = null;

    for (let i = 0; i < numRows; i++) {
      // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–≤—Å–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ (–±–µ–∑ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∏ –≤–æ–¥–∏—Ç–µ–ª—è)
      if (!efData[i][0] && !efData[i][1]) continue;

      // –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —á–µ—Ä–Ω—ã–µ –∏–ª–∏ —Å–µ—Ä—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
      const dispatcherBg = String(efBgData[i][0] || '').toLowerCase();
      const driverBg = String(efBgData[i][1] || '').toLowerCase();
      const hasBlackSeparator = (dispatcherBg === '#000000' || dispatcherBg === 'black' || dispatcherBg === '#000' ||
                                 dispatcherBg === '#808080' || dispatcherBg === '#666666' || dispatcherBg === '#999999' ||
                                 dispatcherBg === '#cccccc' || dispatcherBg === 'gray' || dispatcherBg === 'grey') ||
                                 (driverBg === '#000000' || driverBg === 'black' || driverBg === '#000' ||
                                 driverBg === '#808080' || driverBg === '#666666' || driverBg === '#999999' ||
                                 driverBg === '#cccccc' || driverBg === 'gray' || driverBg === 'grey');

      // –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —ç—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
      const dispatcherText = String(efData[i][0] || '').toLowerCase();
      const driverText = String(efData[i][1] || '').toLowerCase();
      const isHeaderRow = dispatcherText.includes('dispatcher') || driverText.includes('driver');

      // –µ—Å–ª–∏ —á–µ—Ä–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ - –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
      if (hasBlackSeparator || isHeaderRow) {
        if (currentGroup) {
          dispatcherGroups.push(currentGroup);
        }
        currentGroup = {
          header: null,
          drivers: []
        };
      }

      // –µ—Å–ª–∏ –µ—Å—Ç—å —á–µ—Ä–Ω–∞—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è –∏–ª–∏ —ç—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
      let status = '';
      let statusBg = '#ffffff'; // –±–µ–ª—ã–π —Ñ–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

      if (!hasBlackSeparator && !isHeaderRow) {
        // üö® –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 0 - –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–ª–Ω—É—é –Ω–µ–¥–µ–ª—é Break
        const allDaysBreak = daysData[i].every(day =>
          String(day || '').toLowerCase().trim() === 'break'
        );

        if (allDaysBreak) {
          status = 'break';
          statusBg = '#ff8800'; // –æ—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è break
        } else {
          // –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ–¥–∏—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º GROSS –∏ –ø—Ä–æ–±–ª–µ–º
          const weekGross = toNumber_(weekData[i][0]) || 0;

          // —Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ break –¥–Ω–µ–π
          const breakDaysCount = daysData[i].filter(day =>
            String(day || '').toLowerCase().trim() === 'break'
          ).length;

          // üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1 - GROSS > 6999
          if (weekGross > 6999) {
            if (breakDaysCount >= 3) {
              // –±–æ–ª—å—à–µ 3—Ö break –Ω–æ –≥—Ä–æ—Å—Å > 6999
              status = 'worked part-time, but hit the target';
              statusBg = '#0080ff'; // —Å–∏–Ω–∏–π
            } else {
              status = 'full week - hit the target';
              statusBg = '#00ff00'; // —è—Ä–∫–æ-–∑–µ–ª–µ–Ω—ã–π
            }
          } else {
          // üìä –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2 - –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º –≤ 7 –¥–Ω—è—Ö
          const problemsCount = countProblemsInDays_(daysData[i]);

          if (problemsCount >= 2) {
            // ‚ö†Ô∏è 2+ –ø—Ä–æ–±–ª–µ–º = worked part-time
            status = 'worked part-time';
            statusBg = '#0080ff'; // —è—Ä–∫–æ-—Å–∏–Ω–∏–π
          } else if (problemsCount === 1) {
            // ‚ö†Ô∏è 1 –ø—Ä–æ–±–ª–µ–º–∞ = full week - didn't hit the target
            status = 'full week - didn\'t hit the target';
            statusBg = '#ff0000'; // —è—Ä–∫–æ-–∫—Ä–∞—Å–Ω—ã–π
          } else {
            // ‚úÖ 0 –ø—Ä–æ–±–ª–µ–º, –Ω–æ –≥—Ä–æ—Å—Å < 7000
            if (weekGross >= 6000) {
              status = 'full week - didn\'t hit the target';
              statusBg = '#ff0000'; // —è—Ä–∫–æ-–∫—Ä–∞—Å–Ω—ã–π
            } else {
              status = 'worked part-time';
              statusBg = '#0080ff'; // —è—Ä–∫–æ-—Å–∏–Ω–∏–π
            }
          }
        }
        }
      }

      const rowData = [
        efData[i][0], efData[i][1], // E:F
        ...daysData[i], // 7 –¥–Ω–µ–π
        weekData[i][0], // WEEK
        status // ACTIVE DRIVERS STATUS
      ];

      const rowBgData = [
        efBgData[i][0], efBgData[i][1], // E:F
        ...daysBgData[i], // 7 –¥–Ω–µ–π
        weekBgData[i][0], // WEEK
        statusBg // ACTIVE DRIVERS STATUS background
      ];

      // —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
      const rowObject = {
        data: rowData,
        bgData: rowBgData,
        gross: toNumber_(weekData[i][0]) || 0,
        isHeader: hasBlackSeparator || isHeaderRow
      };

      if (!currentGroup) {
        currentGroup = { header: null, drivers: [] };
      }

      if (hasBlackSeparator || isHeaderRow) {
        currentGroup.header = rowObject;
      } else {
        currentGroup.drivers.push(rowObject);
      }
    }

    // –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≥—Ä—É–ø–ø—É
    if (currentGroup) {
      dispatcherGroups.push(currentGroup);
    }

    // —Å–æ—Ä—Ç–∏—Ä—É–µ–º –≤–æ–¥–∏—Ç–µ–ª–µ–π –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã –ø–æ –≥—Ä–æ—Å—Å—É (–±–æ–ª—å—à–æ–π ‚Üí –º–∞–ª–µ–Ω—å–∫–∏–π)
    const allData = [];
    const allBgData = [];

    for (const group of dispatcherGroups) {
      // –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
      if (group.header) {
        allData.push(group.header.data);
        allBgData.push(group.header.bgData);
      }

      // —Å–æ—Ä—Ç–∏—Ä—É–µ–º –≤–æ–¥–∏—Ç–µ–ª–µ–π –ø–æ –≥—Ä–æ—Å—Å—É (—É–±—ã–≤–∞–Ω–∏–µ)
      group.drivers.sort((a, b) => b.gross - a.gross);

      // –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π
      for (const driver of group.drivers) {
        allData.push(driver.data);
        allBgData.push(driver.bgData);
      }
    }

    if (allData.length > 0) {
      // –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
      const dataRange = outSheet.getRange(2, 1, allData.length, totalHeaderCols);
      dataRange.setValues(allData);
      dataRange.setBackgrounds(allBgData);

      // –¥–µ–ª–∞–µ–º –í–°–ï –¥–∞–Ω–Ω—ã–µ –∂–∏—Ä–Ω—ã–º–∏
      dataRange.setFontWeight('bold');

      // –¥–æ–±–∞–≤–ª—è–µ–º —á–µ—Ä–Ω—É—é —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—É—é –ª–∏–Ω–∏—é –º–µ–∂–¥—É WEEK –∏ ACTIVE DRIVERS
      const separatorCol = totalHeaderCols - 1; // –∫–æ–ª–æ–Ω–∫–∞ –ø–µ—Ä–µ–¥ ACTIVE DRIVERS (WEEK)
      outSheet.getRange(1, separatorCol, allData.length + 1, 1).setBorder(
        null, null, null, true, null, null,
        "black",
        SpreadsheetApp.BorderStyle.SOLID_MEDIUM
      );

      // –¥–µ–ª–∞–µ–º —Ç–µ–∫—Å—Ç ACTIVE DRIVERS –∂–∏—Ä–Ω—ã–º
      outSheet.getRange(1, totalHeaderCols, allData.length + 1, 1).setFontWeight('bold');

      // ===== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ACTIVE DRIVERS —Å–ø—Ä–∞–≤–∞ –æ—Ç –¥–∞–Ω–Ω—ã—Ö =====
      const statsStartCol = totalHeaderCols + 2; // —á–µ—Ä–µ–∑ 1 –∫–æ–ª–æ–Ω–∫—É –æ—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const statsStartRow = 2; // –Ω–∞—á–∏–Ω–∞–µ–º —Å —Ç–æ–π –∂–µ —Å—Ç—Ä–æ–∫–∏ —á—Ç–æ –∏ –¥–∞–Ω–Ω—ã–µ

      // –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const stats = {
        'full week - hit the target': 0,
        'full week - didn\'t hit the target': 0,
        'worked part-time': 0,
        'break': 0,
        'worked part-time, but hit the target': 0
      };

      let totalActiveDrivers = 0;

      for (const rowData of allData) {
        const status = rowData[rowData.length - 1]; // –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–æ–ª–æ–Ω–∫–∞ - ACTIVE DRIVERS STATUS
        if (status && status.trim() !== '') {
          if (stats.hasOwnProperty(status)) {
            stats[status]++;
          }
          totalActiveDrivers++;
        }
      }

      // —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      const statsData = [
        ['ACTIVE DRIVERS STATISTICS', ''], // –∑–∞–≥–æ–ª–æ–≤–æ–∫
        ['full week - hit the target', stats['full week - hit the target']],
        ['full week - didn\'t hit the target', stats['full week - didn\'t hit the target']],
        ['worked part-time', stats['worked part-time']],
        ['break', stats['break']],
        ['worked part-time, but hit the target', stats['worked part-time, but hit the target']],
        ['TOTAL ACTIVE DRIVERS', totalActiveDrivers]
      ];

      // –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–ø—Ä–∞–≤–∞ –æ—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const statsRange = outSheet.getRange(statsStartRow, statsStartCol, statsData.length, 2);
      statsRange.setValues(statsData);

      // —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å —è—Ä–∫–∏–º–∏ —Ü–≤–µ—Ç–∞–º–∏
      // –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      outSheet.getRange(statsStartRow, statsStartCol, 1, 2)
        .setFontWeight('bold')
        .setBackground('#4a4a4a')
        .setFontColor('white');

      // full week - hit the target (–∑–µ–ª–µ–Ω—ã–π)
      outSheet.getRange(statsStartRow + 1, statsStartCol, 1, 2)
        .setBackground('#00ff00')
        .setFontWeight('bold')
        .setFontColor('black');

      // full week - didn't hit the target (–∫—Ä–∞—Å–Ω—ã–π)
      outSheet.getRange(statsStartRow + 2, statsStartCol, 1, 2)
        .setBackground('#ff0000')
        .setFontWeight('bold')
        .setFontColor('black');

      // worked part-time (—Å–∏–Ω–∏–π)
      outSheet.getRange(statsStartRow + 3, statsStartCol, 1, 2)
        .setBackground('#0080ff')
        .setFontWeight('bold')
        .setFontColor('black');

      // break (–æ—Ä–∞–Ω–∂–µ–≤—ã–π)
      outSheet.getRange(statsStartRow + 4, statsStartCol, 1, 2)
        .setBackground('#ff8800')
        .setFontWeight('bold')
        .setFontColor('black');

      // worked part-time, but hit the target (—Å–∏–Ω–∏–π)
      outSheet.getRange(statsStartRow + 5, statsStartCol, 1, 2)
        .setBackground('#0080ff')
        .setFontWeight('bold')
        .setFontColor('black');

      // —Å—Ç—Ä–æ–∫–∞ TOTAL
      outSheet.getRange(statsStartRow + statsData.length - 1, statsStartCol, 1, 2)
        .setFontWeight('bold')
        .setBackground('#cccccc')
        .setFontColor('black');

      // —Ä–∞–º–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (medium borders)
      statsRange.setBorder(
        true, true, true, true, true, true,
        "black",
        SpreadsheetApp.BorderStyle.SOLID_MEDIUM
      );

      // –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–≥–æ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–æ–ª–æ–Ω–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥ —Ç–µ–∫—Å—Ç
      outSheet.autoResizeColumn(statsStartCol);
      outSheet.autoResizeColumn(statsStartCol + 1);
    }
  }

  // –≥—Ä–∞–Ω–∏—Ü—ã –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - medium borders –Ω–∞ –≤—Å—ë
  const usedRows = outSheet.getLastRow();
  const usedCols = totalHeaderCols;
  if (usedRows > 0 && usedCols > 0) {
    // –¥–µ–ª–∞–µ–º –í–°–Å –∂–∏—Ä–Ω—ã–º (–≤–∫–ª—é—á–∞—è –∑–∞–≥–æ–ª–æ–≤–∫–∏)
    outSheet.getRange(1, 1, usedRows, usedCols).setFontWeight('bold');

    // medium borders –Ω–∞ –≤—Å—ë
    outSheet.getRange(1, 1, usedRows, usedCols).setBorder(
      true, true, true, true, true, true,
      "black",
      SpreadsheetApp.BorderStyle.SOLID_MEDIUM
    );
  }

  // –∞–≤—Ç–æ—à–∏—Ä–∏–Ω–∞
  autosize_(outSheet, usedCols);
}

// –§—É–Ω–∫—Ü–∏—è addActiveDriversAnalysis_ —É–¥–∞–ª–µ–Ω–∞ - —Ç–µ–ø–µ—Ä—å —Å—Ç–∞—Ç—É—Å –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É

// –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—â–µ–≥–æ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –≤—Å–µ–º –∫–æ–º–∞–Ω–¥–∞–º
function createWeeklySummaryReport_(ss, teamSheets, weekNumber, stamp) {
  try {
    const summarySheetName = `WEEK ${weekNumber} SUMMARY ${stamp}`;

    // —Å–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ—á–∏—â–∞–µ–º –ª–∏—Å—Ç –∏—Ç–æ–≥–æ–≤
    let summarySheet = ss.getSheetByName(summarySheetName);
    if (summarySheet) {
      summarySheet.clear();
    } else {
      summarySheet = ss.insertSheet(summarySheetName);
    }

    let currentRow = 1;
    const allTeamsStats = []; // —Å–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è —Å–≤–æ–¥–∫–∏

    // –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∫–æ–º–∞–Ω–¥—É
    for (let teamIndex = 0; teamIndex < teamSheets.length; teamIndex++) {
      const sh = teamSheets[teamIndex];

      try {
        const lastRow = sh.getLastRow();
        const lastCol = sh.getLastColumn();
        if (lastRow < UG_DATA_START_ROW) continue;

        // –Ω–∞—Ö–æ–¥–∏–º –±–ª–æ–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–µ–¥–µ–ª–∏
        const block = findWeekBlockByNumber_(sh, weekNumber, lastRow, lastCol);
        if (!block) continue;

        // –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–º–∞–Ω–¥—ã —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏
        const teamColors = [
          {bg: '#03ff00', textColor: 'black'},   // Team 1 - –∑–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω, —á–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
          {bg: '#ff9900', textColor: 'black'},   // Team 2 - –æ—Ä–∞–Ω–∂–µ–≤—ã–π —Ñ–æ–Ω, —á–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
          {bg: '#0080ff', textColor: 'black'},   // Team 3 - —Å–∏–Ω–∏–π —Ñ–æ–Ω, —á–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
          {bg: '#ffff00', textColor: 'black'},   // Team 4 - –∂–µ–ª—Ç—ã–π —Ñ–æ–Ω, —á–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
          {bg: '#674ea6', textColor: 'black'}    // Team 5 - —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π —Ñ–æ–Ω, —á–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
        ];

        const teamColor = teamColors[teamIndex] || {bg: '#666666', textColor: 'white'};

        summarySheet.getRange(currentRow, 1).setValue(`Team ${teamIndex + 1}`);
        summarySheet.getRange(currentRow, 1, 1, 2).merge();
        summarySheet.getRange(currentRow, 1).setFontWeight('bold').setFontSize(14);
        summarySheet.getRange(currentRow, 1, 1, 2).setBackground(teamColor.bg).setFontColor(teamColor.textColor);
        summarySheet.getRange(currentRow, 1, 1, 2).setHorizontalAlignment('center');

        // –¥–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –∫ –∑–∞–≥–æ–ª–æ–≤–∫—É –∫–æ–º–∞–Ω–¥—ã
        summarySheet.getRange(currentRow, 1, 1, 2).setBorder(
          true, true, true, true, false, false,
          "black",
          SpreadsheetApp.BorderStyle.SOLID_MEDIUM
        );

        currentRow++;

        // –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
        const teamStats = calculateTeamWeekStats_(sh, block, weekNumber);

        // —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Å–≤–æ–¥–∫–∏
        allTeamsStats.push({
          teamIndex: teamIndex,
          teamName: `Team ${teamIndex + 1}`,
          stats: teamStats
        });

        // –≤—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const statsData = [
          ['Category', `Week ${weekNumber}`],
          ['Full week - hit the target', teamStats['full week - hit the target']],
          ['Full week - didn\'t hit the target', teamStats['full week - didn\'t hit the target']],
          ['Worked part-time', teamStats['worked part-time']],
          ['Break', teamStats['break']],
          ['Worked part-time, but hit the target', teamStats['worked part-time, but hit the target']],
          ['TOTAL ACTIVE DRIVERS', teamStats.totalActive],
          ['TOTAL GROSS', '$' + teamStats.totalGross]
        ];

        // –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        summarySheet.getRange(currentRow, 1, statsData.length, 2).setValues(statsData);

        // —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∞–±–ª–∏—Ü—ã (—Ç–µ–º–Ω–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω, –±–µ–ª—ã–π –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç)
        summarySheet.getRange(currentRow, 1, 1, 2).setFontWeight('bold');
        summarySheet.getRange(currentRow, 1, 1, 2).setBackground('#4a4a4a').setFontColor('white');

        // —Ü–≤–µ—Ç–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        summarySheet.getRange(currentRow + 1, 1, 1, 2).setBackground('#03ff00').setFontWeight('bold').setFontColor('black'); // Full week - hit the target: –∑–µ–ª–µ–Ω—ã–π
        summarySheet.getRange(currentRow + 2, 1, 1, 2).setBackground('#ff0000').setFontWeight('bold').setFontColor('black'); // Full week - didn't hit the target: –∫—Ä–∞—Å–Ω—ã–π
        summarySheet.getRange(currentRow + 3, 1, 1, 2).setBackground('#0080ff').setFontWeight('bold').setFontColor('black'); // Worked part-time: —Å–∏–Ω–∏–π
        summarySheet.getRange(currentRow + 4, 1, 1, 2).setBackground('#ff9900').setFontWeight('bold').setFontColor('black'); // Break: –æ—Ä–∞–Ω–∂–µ–≤—ã–π
        summarySheet.getRange(currentRow + 5, 1, 1, 2).setBackground('#0080ff').setFontWeight('bold').setFontColor('black'); // Worked part-time, but hit the target: —Å–∏–Ω–∏–π
        summarySheet.getRange(currentRow + 6, 1, 1, 2).setBackground('#FFFFFF').setFontWeight('bold').setFontColor('black'); // TOTAL ACTIVE DRIVERS: –±–µ–ª—ã–π —Ñ–æ–Ω, –∂–∏—Ä–Ω—ã–π —á–µ—Ä–Ω—ã–π
        summarySheet.getRange(currentRow + 7, 1, 1, 2).setBackground('#FFFFFF').setFontWeight('bold').setFontColor('black'); // TOTAL GROSS: –±–µ–ª—ã–π —Ñ–æ–Ω, –∂–∏—Ä–Ω—ã–π —á–µ—Ä–Ω—ã–π

        // –¥–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —Ç–æ–ª—å–∫–æ –∫ —Ç–∞–±–ª–∏—Ü–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã
        summarySheet.getRange(currentRow, 1, statsData.length, 2).setBorder(
          true, true, true, true, true, true,
          "black",
          SpreadsheetApp.BorderStyle.SOLID_MEDIUM
        );

        currentRow += statsData.length + 1;

        // –¥–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π)
        if (teamIndex < teamSheets.length - 1) {
          summarySheet.getRange(currentRow, 1, 1, 2).setBackground('#E0E0E0'); // —Å–≤–µ—Ç–ª–æ-—Å–µ—Ä–∞—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
          currentRow += 2; // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
        }

      } catch (e) {
        console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã ${sh.getName()}:`, e);
        continue;
      }
    }

    // —Å–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É Week Summary
    createWeekSummaryTable_(summarySheet, allTeamsStats, weekNumber);

    // –∞–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
    summarySheet.autoResizeColumns(1, 10);

    console.log(`–°–æ–∑–¥–∞–Ω –æ–±—â–∏–π –æ—Ç—á–µ—Ç: ${summarySheetName}`);

  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞:', e);
  }
}

// –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
function calculateTeamWeekStats_(sheet, block, weekNumber) {
  const {daysStartCol, weekGrossCol} = block;
  const lastRow = sheet.getLastRow();
  const numRows = lastRow - UG_DATA_START_ROW + 1;

  const stats = {
    'full week - hit the target': 0,
    'full week - didn\'t hit the target': 0,
    'worked part-time': 0,
    'break': 0,
    'worked part-time, but hit the target': 0,
    totalActive: 0,
    totalGross: 0
  };

  if (numRows <= 0) return stats;

  const efData = sheet.getRange(UG_DATA_START_ROW, colLetterToIndex_('E'), numRows, 2).getDisplayValues();
  const efBgData = sheet.getRange(UG_DATA_START_ROW, colLetterToIndex_('E'), numRows, 2).getBackgrounds();
  const daysData = sheet.getRange(UG_DATA_START_ROW, daysStartCol, numRows, WEEK_DAYS_LEN).getDisplayValues();
  const weekData = sheet.getRange(UG_DATA_START_ROW, weekGrossCol, numRows, 1).getDisplayValues();

  for (let i = 0; i < numRows; i++) {
    // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
    if (!efData[i][0] && !efData[i][1]) continue;

    const dispatcherBg = String(efBgData[i][0] || '').toLowerCase();
    const driverBg = String(efBgData[i][1] || '').toLowerCase();
    const hasBlackSeparator = (dispatcherBg === '#000000' || dispatcherBg === 'black' || dispatcherBg === '#000' ||
                              dispatcherBg === '#808080' || dispatcherBg === '#666666' || dispatcherBg === '#999999' ||
                              dispatcherBg === '#cccccc' || dispatcherBg === 'gray' || dispatcherBg === 'grey') ||
                              (driverBg === '#000000' || driverBg === 'black' || driverBg === '#000' ||
                              driverBg === '#808080' || driverBg === '#666666' || driverBg === '#999999' ||
                              driverBg === '#cccccc' || driverBg === 'gray' || driverBg === 'grey');

    const dispatcherText = String(efData[i][0] || '').toLowerCase();
    const driverText = String(efData[i][1] || '').toLowerCase();
    const isHeaderRow = dispatcherText.includes('dispatcher') || driverText.includes('driver');

    if (hasBlackSeparator || isHeaderRow) continue;

    // –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ–¥–∏—Ç–µ–ª—è
    const allDaysBreak = daysData[i].every(day =>
      String(day || '').toLowerCase().trim() === 'break'
    );

    if (allDaysBreak) {
      stats['break']++;
    } else {
      const weekGross = toNumber_(weekData[i][0]) || 0;
      const breakDaysCount = daysData[i].filter(day =>
        String(day || '').toLowerCase().trim() === 'break'
      ).length;

      if (weekGross > 6999) {
        if (breakDaysCount >= 3) {
          stats['worked part-time, but hit the target']++;
        } else {
          stats['full week - hit the target']++;
        }
      } else {
        if (breakDaysCount >= 3) {
          stats['worked part-time']++;
        } else {
          stats['full week - didn\'t hit the target']++;
        }
      }
    }

    stats.totalActive++;

    // –¥–æ–±–∞–≤–ª—è–µ–º –≥—Ä–æ—Å—Å –∫ –æ–±—â–µ–º—É –≥—Ä–æ—Å—Å—É –∫–æ–º–∞–Ω–¥—ã
    const weekGross = toNumber_(weekData[i][0]) || 0;
    stats.totalGross += weekGross;
  }

  return stats;
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã Week Summary
function createWeekSummaryTable_(summarySheet, allTeamsStats, weekNumber) {
  try {
    const startCol = 4; // –∫–æ–ª–æ–Ω–∫–∞ D (—Ä—è–¥–æ–º —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏)
    let currentRow = 1;

    // –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
    summarySheet.getRange(currentRow, startCol).setValue(`Week ${weekNumber} Summary`);
    summarySheet.getRange(currentRow, startCol, 1, 7).merge();
    summarySheet.getRange(currentRow, startCol).setFontWeight('bold').setFontSize(14);
    summarySheet.getRange(currentRow, startCol, 1, 7).setBackground('#4a4a4a').setFontColor('white');
    summarySheet.getRange(currentRow, startCol, 1, 7).setHorizontalAlignment('center');
    currentRow += 2;

    // –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
    const headers = [
      'Team',
      'Hit Target (Full week)',
      'Didn\'t Hit Target (Full week)',
      'Average Full Week',
      'Part-time',
      'Break',
      'Total Active Drivers',
      'Total Gross'
    ];

    summarySheet.getRange(currentRow, startCol, 1, headers.length).setValues([headers]);
    summarySheet.getRange(currentRow, startCol, 1, headers.length).setFontWeight('bold');
    summarySheet.getRange(currentRow, startCol, 1, headers.length).setBackground('#4a4a4a').setFontColor('white');
    currentRow++;

    // —Ü–≤–µ—Ç–∞ –∫–æ–º–∞–Ω–¥
    const teamColors = [
      '#03ff00', // Team 1 - –∑–µ–ª–µ–Ω—ã–π
      '#ff9900', // Team 2 - –æ—Ä–∞–Ω–∂–µ–≤—ã–π
      '#0080ff', // Team 3 - —Å–∏–Ω–∏–π
      '#ffff00', // Team 4 - –∂–µ–ª—Ç—ã–π
      '#674ea6'  // Team 5 - —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
    ];

    let totalStats = {
      hitTarget: 0,
      didntHitTarget: 0,
      partTime: 0,
      break: 0,
      totalActive: 0,
      totalGross: 0
    };

    // –¥–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥
    for (const teamData of allTeamsStats) {
      const stats = teamData.stats;
      const hitTarget = stats['full week - hit the target'];
      const didntHitTarget = stats['full week - didn\'t hit the target'];
      const fullWeekTotal = hitTarget + didntHitTarget;

      // —Ä–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
      const hitTargetPercent = fullWeekTotal > 0 ? Math.round((hitTarget / fullWeekTotal) * 100) : 0;
      const didntHitTargetPercent = fullWeekTotal > 0 ? Math.round((didntHitTarget / fullWeekTotal) * 100) : 0;

      // —Ä–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ
      const averageFullWeek = fullWeekTotal > 0 ? Math.round(stats.totalGross / fullWeekTotal) : 0;

      const rowData = [
        teamData.teamName,
        `${hitTarget} (${hitTargetPercent}%)`,
        `${didntHitTarget} (${didntHitTargetPercent}%)`,
        `$${averageFullWeek}`,
        stats['worked part-time'] + stats['worked part-time, but hit the target'],
        stats['break'],
        stats.totalActive,
        `$${stats.totalGross}`
      ];

      summarySheet.getRange(currentRow, startCol, 1, rowData.length).setValues([rowData]);

      // –ø—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –∫–æ–º–∞–Ω–¥—ã
      summarySheet.getRange(currentRow, startCol, 1, rowData.length).setBackground(teamColors[teamData.teamIndex]);
      summarySheet.getRange(currentRow, startCol, 1, rowData.length).setFontWeight('bold').setFontColor('black');

      // –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ–º –∏—Ç–æ–≥–∏
      totalStats.hitTarget += hitTarget;
      totalStats.didntHitTarget += didntHitTarget;
      totalStats.partTime += stats['worked part-time'] + stats['worked part-time, but hit the target'];
      totalStats.break += stats['break'];
      totalStats.totalActive += stats.totalActive;
      totalStats.totalGross += stats.totalGross;

      currentRow++;
    }

    // —Å—Ç—Ä–æ–∫–∞ TOTAL
    const totalRow = [
      'TOTAL',
      totalStats.hitTarget,
      totalStats.didntHitTarget,
      `$${Math.round(totalStats.totalGross / (totalStats.hitTarget + totalStats.didntHitTarget))}`,
      totalStats.partTime,
      totalStats.break,
      totalStats.totalActive,
      `$${totalStats.totalGross}`
    ];

    summarySheet.getRange(currentRow, startCol, 1, totalRow.length).setValues([totalRow]);
    summarySheet.getRange(currentRow, startCol, 1, totalRow.length).setBackground('#FFFFFF').setFontWeight('bold').setFontColor('black');

    // –¥–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –∫ —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
    const summaryTableRows = allTeamsStats.length + 2; // –∑–∞–≥–æ–ª–æ–≤–æ–∫ + –∫–æ–º–∞–Ω–¥—ã + TOTAL
    summarySheet.getRange(currentRow - summaryTableRows, startCol, summaryTableRows + 1, headers.length).setBorder(
      true, true, true, true, true, true,
      "black",
      SpreadsheetApp.BorderStyle.SOLID_MEDIUM
    );

  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã:', e);
  }
}
